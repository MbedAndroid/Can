
cancpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  0000164c  000016e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008001e8  008001e8  000017c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002899  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8d  00000000  00000000  000042a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cba  00000000  00000000  00005032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000628  00000000  00000000  00005cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aeb  00000000  00000000  00006314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001841  00000000  00000000  00006dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00008640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_1>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_4>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_13>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	af 02       	muls	r26, r31
      6a:	db 02       	muls	r29, r27
      6c:	df 02       	muls	r29, r31
      6e:	73 02       	muls	r23, r19
      70:	77 02       	muls	r23, r23
      72:	7b 02       	muls	r23, r27
      74:	7f 02       	muls	r23, r31
      76:	83 02       	muls	r24, r19
      78:	87 02       	muls	r24, r23
      7a:	8b 02       	muls	r24, r27
      7c:	8f 02       	muls	r24, r31
      7e:	93 02       	muls	r25, r19
      80:	97 02       	muls	r25, r23
      82:	9b 02       	muls	r25, r27
      84:	9f 02       	muls	r25, r31
      86:	a3 02       	muls	r26, r19
      88:	a7 02       	muls	r26, r23
      8a:	ab 02       	muls	r26, r27

0000008c <__ctors_start>:
      8c:	02 02       	muls	r16, r18

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ec e4       	ldi	r30, 0x4C	; 76
      a2:	f6 e1       	ldi	r31, 0x16	; 22
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a8 3e       	cpi	r26, 0xE8	; 232
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	22 e0       	ldi	r18, 0x02	; 2
      b2:	a8 ee       	ldi	r26, 0xE8	; 232
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a6 37       	cpi	r26, 0x76	; 118
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>

000000c0 <__do_global_ctors>:
      c0:	10 e0       	ldi	r17, 0x00	; 0
      c2:	ce e8       	ldi	r28, 0x8E	; 142
      c4:	d0 e0       	ldi	r29, 0x00	; 0
      c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_global_ctors+0x10>
      c8:	22 97       	sbiw	r28, 0x02	; 2
      ca:	fe 01       	movw	r30, r28
      cc:	0e 94 4f 08 	call	0x109e	; 0x109e <__tablejump__>
      d0:	cc 38       	cpi	r28, 0x8C	; 140
      d2:	d1 07       	cpc	r29, r17
      d4:	c9 f7       	brne	.-14     	; 0xc8 <__do_global_ctors+0x8>
      d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
      da:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <_ZN15OregonDecoderV26gotBitEi>:
{
	public:
	OregonDecoderV2() {}

	// add one bit to the packet data buffer
	virtual void gotBit (int value) {
      e2:	fc 01       	movw	r30, r24
		if (!(total_bits & 0x01)) {
      e4:	82 81       	ldd	r24, Z+2	; 0x02
      e6:	93 81       	ldd	r25, Z+3	; 0x03
      e8:	80 fd       	sbrc	r24, 0
      ea:	15 c0       	rjmp	.+42     	; 0x116 <_ZN15OregonDecoderV26gotBitEi+0x34>
			data[pos] = (data[pos] >> 1) | (value ? 0x80 : 00);
      ec:	22 85       	ldd	r18, Z+10	; 0x0a
      ee:	33 85       	ldd	r19, Z+11	; 0x0b
      f0:	df 01       	movw	r26, r30
      f2:	a2 0f       	add	r26, r18
      f4:	b3 1f       	adc	r27, r19
      f6:	1c 96       	adiw	r26, 0x0c	; 12
      f8:	4c 91       	ld	r20, X
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	55 95       	asr	r21
      fe:	47 95       	ror	r20
     100:	67 2b       	or	r22, r23
     102:	11 f0       	breq	.+4      	; 0x108 <_ZN15OregonDecoderV26gotBitEi+0x26>
     104:	60 e8       	ldi	r22, 0x80	; 128
     106:	01 c0       	rjmp	.+2      	; 0x10a <_ZN15OregonDecoderV26gotBitEi+0x28>
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	df 01       	movw	r26, r30
     10c:	a2 0f       	add	r26, r18
     10e:	b3 1f       	adc	r27, r19
     110:	46 2b       	or	r20, r22
     112:	1c 96       	adiw	r26, 0x0c	; 12
     114:	4c 93       	st	X, r20
		}
		total_bits++;
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	93 83       	std	Z+3, r25	; 0x03
     11a:	82 83       	std	Z+2, r24	; 0x02
		pos = total_bits >> 4;
     11c:	95 95       	asr	r25
     11e:	87 95       	ror	r24
     120:	95 95       	asr	r25
     122:	87 95       	ror	r24
     124:	95 95       	asr	r25
     126:	87 95       	ror	r24
     128:	95 95       	asr	r25
     12a:	87 95       	ror	r24
     12c:	93 87       	std	Z+11, r25	; 0x0b
     12e:	82 87       	std	Z+10, r24	; 0x0a
		if (pos >= sizeof data) {
     130:	80 97       	sbiw	r24, 0x20	; 32
     132:	58 f0       	brcs	.+22     	; 0x14a <_ZN15OregonDecoderV26gotBitEi+0x68>
		count = pos;
		return data;
	}

	void resetDecoder () {
		total_bits = bits = pos = flip = 0;
     134:	17 82       	std	Z+7, r1	; 0x07
     136:	16 82       	std	Z+6, r1	; 0x06
     138:	13 86       	std	Z+11, r1	; 0x0b
     13a:	12 86       	std	Z+10, r1	; 0x0a
     13c:	15 82       	std	Z+5, r1	; 0x05
     13e:	14 82       	std	Z+4, r1	; 0x04
     140:	13 82       	std	Z+3, r1	; 0x03
     142:	12 82       	std	Z+2, r1	; 0x02
		state = UNKNOWN;
     144:	11 86       	std	Z+9, r1	; 0x09
     146:	10 86       	std	Z+8, r1	; 0x08
     148:	08 95       	ret
		pos = total_bits >> 4;
		if (pos >= sizeof data) {
			resetDecoder();
			return;
		}
		state = OK;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	91 87       	std	Z+9, r25	; 0x09
     150:	80 87       	std	Z+8, r24	; 0x08
     152:	08 95       	ret

00000154 <_ZN15OregonDecoderV26decodeEi>:
	}

	virtual int decode (int width) {
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	ec 01       	movw	r28, r24
		if (200 <= width && width < 1200) {
     15a:	cb 01       	movw	r24, r22
     15c:	88 5c       	subi	r24, 0xC8	; 200
     15e:	91 09       	sbc	r25, r1
     160:	88 3e       	cpi	r24, 0xE8	; 232
     162:	93 40       	sbci	r25, 0x03	; 3
     164:	08 f0       	brcs	.+2      	; 0x168 <_ZN15OregonDecoderV26decodeEi+0x14>
     166:	4b c0       	rjmp	.+150    	; 0x1fe <_ZN15OregonDecoderV26decodeEi+0xaa>
			bool w = width >= 700;
     168:	21 e0       	ldi	r18, 0x01	; 1
     16a:	6c 3b       	cpi	r22, 0xBC	; 188
     16c:	72 40       	sbci	r23, 0x02	; 2
     16e:	0c f4       	brge	.+2      	; 0x172 <_ZN15OregonDecoderV26decodeEi+0x1e>
     170:	20 e0       	ldi	r18, 0x00	; 0
			switch (state) {
     172:	88 85       	ldd	r24, Y+8	; 0x08
     174:	99 85       	ldd	r25, Y+9	; 0x09
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	91 05       	cpc	r25, r1
     17a:	69 f1       	breq	.+90     	; 0x1d6 <_ZN15OregonDecoderV26decodeEi+0x82>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	91 05       	cpc	r25, r1
     180:	a9 f0       	breq	.+42     	; 0x1ac <_ZN15OregonDecoderV26decodeEi+0x58>
     182:	89 2b       	or	r24, r25
     184:	99 f5       	brne	.+102    	; 0x1ec <_ZN15OregonDecoderV26decodeEi+0x98>
				case UNKNOWN:
				if (w) {
     186:	22 23       	and	r18, r18
     188:	31 f0       	breq	.+12     	; 0x196 <_ZN15OregonDecoderV26decodeEi+0x42>
					// Long pulse
					++flip;
     18a:	8e 81       	ldd	r24, Y+6	; 0x06
     18c:	9f 81       	ldd	r25, Y+7	; 0x07
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	9f 83       	std	Y+7, r25	; 0x07
     192:	8e 83       	std	Y+6, r24	; 0x06
     194:	2b c0       	rjmp	.+86     	; 0x1ec <_ZN15OregonDecoderV26decodeEi+0x98>
					} else if (32 <= flip) {
     196:	8e 81       	ldd	r24, Y+6	; 0x06
     198:	9f 81       	ldd	r25, Y+7	; 0x07
     19a:	80 97       	sbiw	r24, 0x20	; 32
     19c:	9c f1       	brlt	.+102    	; 0x204 <_ZN15OregonDecoderV26decodeEi+0xb0>
					// Short pulse, start bit
					flip = 0;
     19e:	1f 82       	std	Y+7, r1	; 0x07
     1a0:	1e 82       	std	Y+6, r1	; 0x06
					state = T0;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	99 87       	std	Y+9, r25	; 0x09
     1a8:	88 87       	std	Y+8, r24	; 0x08
     1aa:	20 c0       	rjmp	.+64     	; 0x1ec <_ZN15OregonDecoderV26decodeEi+0x98>
					// Reset decoder
					return -1;
				}
				break;
				case OK:
				if (!w) {
     1ac:	21 11       	cpse	r18, r1
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <_ZN15OregonDecoderV26decodeEi+0x66>
					// Short pulse
					state = T0;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	99 87       	std	Y+9, r25	; 0x09
     1b6:	88 87       	std	Y+8, r24	; 0x08
     1b8:	19 c0       	rjmp	.+50     	; 0x1ec <_ZN15OregonDecoderV26decodeEi+0x98>
		state = OK;
	}

	// store a bit using Manchester encoding
	void manchester (char value) {
		flip ^= value; // manchester code, long pulse flips the bit
     1ba:	6e 81       	ldd	r22, Y+6	; 0x06
     1bc:	7f 81       	ldd	r23, Y+7	; 0x07
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	62 27       	eor	r22, r18
     1c2:	7f 83       	std	Y+7, r23	; 0x07
     1c4:	6e 83       	std	Y+6, r22	; 0x06
		gotBit(flip);
     1c6:	e8 81       	ld	r30, Y
     1c8:	f9 81       	ldd	r31, Y+1	; 0x01
     1ca:	02 80       	ldd	r0, Z+2	; 0x02
     1cc:	f3 81       	ldd	r31, Z+3	; 0x03
     1ce:	e0 2d       	mov	r30, r0
     1d0:	ce 01       	movw	r24, r28
     1d2:	09 95       	icall
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <_ZN15OregonDecoderV26decodeEi+0x98>
					// Long pulse
					manchester(1);
				}
				break;
				case T0:
				if (!w) {
     1d6:	21 11       	cpse	r18, r1
     1d8:	18 c0       	rjmp	.+48     	; 0x20a <_ZN15OregonDecoderV26decodeEi+0xb6>
	}

	// store a bit using Manchester encoding
	void manchester (char value) {
		flip ^= value; // manchester code, long pulse flips the bit
		gotBit(flip);
     1da:	e8 81       	ld	r30, Y
     1dc:	f9 81       	ldd	r31, Y+1	; 0x01
     1de:	6e 81       	ldd	r22, Y+6	; 0x06
     1e0:	7f 81       	ldd	r23, Y+7	; 0x07
     1e2:	02 80       	ldd	r0, Z+2	; 0x02
     1e4:	f3 81       	ldd	r31, Z+3	; 0x03
     1e6:	e0 2d       	mov	r30, r0
     1e8:	ce 01       	movw	r24, r28
     1ea:	09 95       	icall
				break;
			}
			} else {
			return -1;
		}
		return total_bits == 160 ? 1: 0;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	2a 81       	ldd	r18, Y+2	; 0x02
     1f2:	3b 81       	ldd	r19, Y+3	; 0x03
     1f4:	20 3a       	cpi	r18, 0xA0	; 160
     1f6:	31 05       	cpc	r19, r1
     1f8:	51 f0       	breq	.+20     	; 0x20e <_ZN15OregonDecoderV26decodeEi+0xba>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	08 c0       	rjmp	.+16     	; 0x20e <_ZN15OregonDecoderV26decodeEi+0xba>
					return -1;
				}
				break;
			}
			} else {
			return -1;
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	9f ef       	ldi	r25, 0xFF	; 255
     202:	05 c0       	rjmp	.+10     	; 0x20e <_ZN15OregonDecoderV26decodeEi+0xba>
					// Short pulse, start bit
					flip = 0;
					state = T0;
					} else {
					// Reset decoder
					return -1;
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	9f ef       	ldi	r25, 0xFF	; 255
     208:	02 c0       	rjmp	.+4      	; 0x20e <_ZN15OregonDecoderV26decodeEi+0xba>
				if (!w) {
					// Second short pulse
					manchester(0);
					} else {
					// Reset decoder
					return -1;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	9f ef       	ldi	r25, 0xFF	; 255
			}
			} else {
			return -1;
		}
		return total_bits == 160 ? 1: 0;
	}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <_Z4initv>:
tCAN message;
char buf[60];
CANDEF	Can1;
void init(void)
{
	SET(P_CANRESET);
     214:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(P_CANRESET);
     216:	22 9a       	sbi	0x04, 2	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	8f e3       	ldi	r24, 0x3F	; 63
     21a:	9c e9       	ldi	r25, 0x9C	; 156
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <_Z4initv+0x8>
     220:	00 c0       	rjmp	.+0      	; 0x222 <_Z4initv+0xe>
     222:	00 00       	nop
	_delay_ms(10);
	RESET(P_CANRESET);
     224:	2a 98       	cbi	0x05, 2	; 5
	RESET(REL);
     226:	5c 98       	cbi	0x0b, 4	; 11
	SET_OUTPUT(REL);
     228:	54 9a       	sbi	0x0a, 4	; 10
	SET(LED);
     22a:	5f 9a       	sbi	0x0b, 7	; 11
	SET_OUTPUT(LED);
     22c:	57 9a       	sbi	0x0a, 7	; 10
	SET_INPUT(A1);
     22e:	39 98       	cbi	0x07, 1	; 7
	SET_INPUT(A2);
     230:	3a 98       	cbi	0x07, 2	; 7
	SET_INPUT(A3);
     232:	3b 98       	cbi	0x07, 3	; 7
	SET_INPUT(A4);
     234:	3c 98       	cbi	0x07, 4	; 7
	SET(A1);
     236:	41 9a       	sbi	0x08, 1	; 8
	SET(A2);
     238:	42 9a       	sbi	0x08, 2	; 8
	SET(A3);
     23a:	43 9a       	sbi	0x08, 3	; 8
	SET(A4);
     23c:	44 9a       	sbi	0x08, 4	; 8
     23e:	08 95       	ret

00000240 <_Z12LoopBackTestv>:
}
void LoopBackTest (void)
{
	// einige Testwerte
	message.id = 0x123;
     240:	83 e2       	ldi	r24, 0x23	; 35
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	90 93 27 02 	sts	0x0227, r25
     248:	80 93 26 02 	sts	0x0226, r24
	message.header.rtr = 0;
     24c:	e8 e2       	ldi	r30, 0x28	; 40
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	80 81       	ld	r24, Z
	message.header.length = 2;
     252:	80 7e       	andi	r24, 0xE0	; 224
     254:	84 60       	ori	r24, 0x04	; 4
     256:	80 83       	st	Z, r24
	message.data[0] = 0xab;
     258:	8b ea       	ldi	r24, 0xAB	; 171
     25a:	80 93 29 02 	sts	0x0229, r24
	message.data[1] = 0xcd;
     25e:	8d ec       	ldi	r24, 0xCD	; 205
     260:	80 93 2a 02 	sts	0x022A, r24
	
	
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), (1<<REQOP1)); //set mcp in loopback mode
     264:	40 e4       	ldi	r20, 0x40	; 64
     266:	60 ee       	ldi	r22, 0xE0	; 224
     268:	8f e0       	ldi	r24, 0x0F	; 15
     26a:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
	// Sende eine Nachricht
	if (mcp2515_send_message(&message)) {
     26e:	86 e2       	ldi	r24, 0x26	; 38
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 a9 03 	call	0x752	; 0x752 <_Z20mcp2515_send_messageP4tCAN>
     276:	8f e3       	ldi	r24, 0x3F	; 63
     278:	9c e9       	ldi	r25, 0x9C	; 156
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <_Z12LoopBackTestv+0x3a>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <_Z12LoopBackTestv+0x40>
     280:	00 00       	nop
	}
	
	// warte ein bisschen
	_delay_ms(10);
	
	if (mcp2515_check_message()) {
     282:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z21mcp2515_check_messagev>
     286:	88 23       	and	r24, r24
     288:	71 f0       	breq	.+28     	; 0x2a6 <_Z12LoopBackTestv+0x66>

		//therm_read_temperature();
		// read the message from the buffers
		if (mcp2515_get_message(&message)) 	Blink(1);	else {
     28a:	86 e2       	ldi	r24, 0x26	; 38
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	0e 94 26 03 	call	0x64c	; 0x64c <_Z19mcp2515_get_messageP4tCAN>
     292:	88 23       	and	r24, r24
     294:	21 f0       	breq	.+8      	; 0x29e <_Z12LoopBackTestv+0x5e>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z5Blinkc>
     29c:	07 c0       	rjmp	.+14     	; 0x2ac <_Z12LoopBackTestv+0x6c>
			
			Blink(4);
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z5Blinkc>
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <_Z12LoopBackTestv+0x6c>
		}
		
	}
	else Blink(6);
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z5Blinkc>
	
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0); //set mcp back to normal mode
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	60 ee       	ldi	r22, 0xE0	; 224
     2b0:	8f e0       	ldi	r24, 0x0F	; 15
     2b2:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
     2b6:	08 95       	ret

000002b8 <main>:
{
	
}
int main(void)
{
		wdt_reset();
     2b8:	a8 95       	wdr
		MCUSR=0;
     2ba:	14 be       	out	0x34, r1	; 52
		WDTCSR|=_BV(WDCE) | _BV(WDE);
     2bc:	e0 e6       	ldi	r30, 0x60	; 96
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	88 61       	ori	r24, 0x18	; 24
     2c4:	80 83       	st	Z, r24
		WDTCSR=0;
     2c6:	10 82       	st	Z, r1
		
		init();
     2c8:	0e 94 0a 01 	call	0x214	; 0x214 <_Z4initv>
		InitTimer();
     2cc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9InitTimerv>
		EnableInterrupt(0);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z15EnableInterruptc>
		
		USART_Init(MYUBRR);
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z10USART_Initj>

		usart_pstr("start-up Uart\r\n");
     2de:	8d e0       	ldi	r24, 0x0D	; 13
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
		// Aktiviere Interrupts
		
		// Versuche den MCP2515 zu initilaisieren
		if (!mcp2515_init()) {
     2e6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_Z12mcp2515_initv>
     2ea:	81 11       	cpse	r24, r1
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <main+0x46>
			usart_pstr("MCP2515 Init failure\r\n");
     2ee:	8d e1       	ldi	r24, 0x1D	; 29
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
			Blink(6);
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z5Blinkc>
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <main+0x4c>
		}
		else Blink(1);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z5Blinkc>

		//
		Can1.id=0x7f;
     304:	8f e7       	ldi	r24, 0x7F	; 127
     306:	80 93 e9 01 	sts	0x01E9, r24
		Can1.state=ST_PREOPERATIONAL;
     30a:	81 e1       	ldi	r24, 0x11	; 17
     30c:	80 93 e8 01 	sts	0x01E8, r24
		read_serial();
     310:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z11read_serialv>
		sprintf(buf,"serial:%d %d %d %d %d %d \r\n",ROM[1],ROM[2],ROM[3],ROM[4],ROM[5],ROM[6]);
     314:	80 91 37 02 	lds	r24, 0x0237
     318:	1f 92       	push	r1
     31a:	8f 93       	push	r24
     31c:	80 91 36 02 	lds	r24, 0x0236
     320:	1f 92       	push	r1
     322:	8f 93       	push	r24
     324:	c5 e3       	ldi	r28, 0x35	; 53
     326:	d2 e0       	ldi	r29, 0x02	; 2
     328:	88 81       	ld	r24, Y
     32a:	1f 92       	push	r1
     32c:	8f 93       	push	r24
     32e:	04 e3       	ldi	r16, 0x34	; 52
     330:	12 e0       	ldi	r17, 0x02	; 2
     332:	f8 01       	movw	r30, r16
     334:	80 81       	ld	r24, Z
     336:	1f 92       	push	r1
     338:	8f 93       	push	r24
     33a:	0f 2e       	mov	r0, r31
     33c:	f3 e3       	ldi	r31, 0x33	; 51
     33e:	ef 2e       	mov	r14, r31
     340:	f2 e0       	ldi	r31, 0x02	; 2
     342:	ff 2e       	mov	r15, r31
     344:	f0 2d       	mov	r31, r0
     346:	f7 01       	movw	r30, r14
     348:	80 81       	ld	r24, Z
     34a:	1f 92       	push	r1
     34c:	8f 93       	push	r24
     34e:	0f 2e       	mov	r0, r31
     350:	f2 e3       	ldi	r31, 0x32	; 50
     352:	cf 2e       	mov	r12, r31
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	df 2e       	mov	r13, r31
     358:	f0 2d       	mov	r31, r0
     35a:	f6 01       	movw	r30, r12
     35c:	80 81       	ld	r24, Z
     35e:	1f 92       	push	r1
     360:	8f 93       	push	r24
     362:	84 e3       	ldi	r24, 0x34	; 52
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	9f 93       	push	r25
     368:	8f 93       	push	r24
     36a:	8a ee       	ldi	r24, 0xEA	; 234
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	0e 94 53 08 	call	0x10a6	; 0x10a6 <sprintf>
		ROM[1]=1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	f6 01       	movw	r30, r12
     37a:	80 83       	st	Z, r24
		ROM[2]=2;
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	f7 01       	movw	r30, r14
     380:	80 83       	st	Z, r24
		ROM[3]=3;
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	f8 01       	movw	r30, r16
     386:	80 83       	st	Z, r24
		ROM[4]=4;
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	88 83       	st	Y, r24
		usart_pstr(buf);
     38c:	8a ee       	ldi	r24, 0xEA	; 234
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
		//Can1.id=(u8) read_eeprom_word(SerialNumberloc);
		//Can1.id=(u8) 123456;
		//sprintf(buf,"SerialNumber:%d\r\n",Can1.id);
		

		LoopBackTest();
     394:	0e 94 20 01 	call	0x240	; 0x240 <_Z12LoopBackTestv>
     398:	ff ef       	ldi	r31, 0xFF	; 255
     39a:	23 ec       	ldi	r18, 0xC3	; 195
     39c:	89 e0       	ldi	r24, 0x09	; 9
     39e:	f1 50       	subi	r31, 0x01	; 1
     3a0:	20 40       	sbci	r18, 0x00	; 0
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0xe6>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0xf0>
     3a8:	00 00       	nop
		_delay_ms(200);

		SendPDO(PDO4);
     3aa:	80 e8       	ldi	r24, 0x80	; 128
     3ac:	94 e0       	ldi	r25, 0x04	; 4
     3ae:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_Z7SendPDOj>
		usart_pstr("Can Request CanID\r\n");
     3b2:	80 e5       	ldi	r24, 0x50	; 80
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
		

		PCMSK1=(1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11) |(1<<PCINT12);
     3ba:	8e e1       	ldi	r24, 0x1E	; 30
     3bc:	80 93 6c 00 	sts	0x006C, r24
		PCICR=(1<<PCIF1);
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	80 93 68 00 	sts	0x0068, r24

		wdt_enable (WDTO_8S);
     3c6:	29 e2       	ldi	r18, 0x29	; 41
     3c8:	88 e1       	ldi	r24, 0x18	; 24
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	a8 95       	wdr
     3d2:	80 93 60 00 	sts	0x0060, r24
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	20 93 60 00 	sts	0x0060, r18
		sei();
     3dc:	78 94       	sei
		#ifndef TFA
		set_sleep_mode(SLEEP_MODE_IDLE);
     3de:	83 b7       	in	r24, 0x33	; 51
     3e0:	81 7f       	andi	r24, 0xF1	; 241
     3e2:	83 bf       	out	0x33, r24	; 51
		sleep_mode();
     3e4:	83 b7       	in	r24, 0x33	; 51
     3e6:	81 60       	ori	r24, 0x01	; 1
     3e8:	83 bf       	out	0x33, r24	; 51
     3ea:	88 95       	sleep
     3ec:	83 b7       	in	r24, 0x33	; 51
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	83 bf       	out	0x33, r24	; 51
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	70 96       	adiw	r30, 0x10	; 16
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	fe bf       	out	0x3e, r31	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	ed bf       	out	0x3d, r30	; 61
     402:	ff cf       	rjmp	.-2      	; 0x402 <main+0x14a>

00000404 <_GLOBAL__sub_I_orscV2>:
		count = pos;
		return data;
	}

	void resetDecoder () {
		total_bits = bits = pos = flip = 0;
     404:	10 92 40 02 	sts	0x0240, r1
     408:	10 92 3f 02 	sts	0x023F, r1
     40c:	10 92 44 02 	sts	0x0244, r1
     410:	10 92 43 02 	sts	0x0243, r1
     414:	10 92 3e 02 	sts	0x023E, r1
     418:	10 92 3d 02 	sts	0x023D, r1
     41c:	10 92 3c 02 	sts	0x023C, r1
     420:	10 92 3b 02 	sts	0x023B, r1
		state = UNKNOWN;
     424:	10 92 42 02 	sts	0x0242, r1
     428:	10 92 41 02 	sts	0x0241, r1


class OregonDecoderV2 : public DecodeOOK
{
	public:
	OregonDecoderV2() {}
     42c:	88 e6       	ldi	r24, 0x68	; 104
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	90 93 3a 02 	sts	0x023A, r25
     434:	80 93 39 02 	sts	0x0239, r24
     438:	08 95       	ret

0000043a <_Z8spi_putch>:
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
     43a:	8e bd       	out	0x2e, r24	; 46
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
     43c:	0d b4       	in	r0, 0x2d	; 45
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <_Z8spi_putch+0x2>
		;
	
	return SPDR;
     442:	8e b5       	in	r24, 0x2e	; 46
}
     444:	08 95       	ret

00000446 <_Z22mcp2515_write_registerhh>:

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	d8 2f       	mov	r29, r24
     44c:	c6 2f       	mov	r28, r22
	RESET(MCP2515_CS);
     44e:	29 98       	cbi	0x05, 1	; 5
	
	spi_putc(SPI_WRITE);
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(adress);
     456:	8d 2f       	mov	r24, r29
     458:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(data);
     45c:	8c 2f       	mov	r24, r28
     45e:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	SET(MCP2515_CS);
     462:	29 9a       	sbi	0x05, 1	; 5
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <_Z21mcp2515_read_registerh>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
     46e:	29 98       	cbi	0x05, 1	; 5
	
	spi_putc(SPI_READ);
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(adress);
     476:	8c 2f       	mov	r24, r28
     478:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	data = spi_putc(0xff);	
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	SET(MCP2515_CS);
     482:	29 9a       	sbi	0x05, 1	; 5
	
	return data;
}
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <_Z18mcp2515_bit_modifyhhh>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	18 2f       	mov	r17, r24
     490:	d6 2f       	mov	r29, r22
     492:	c4 2f       	mov	r28, r20
	RESET(MCP2515_CS);
     494:	29 98       	cbi	0x05, 1	; 5
	
	spi_putc(SPI_BIT_MODIFY);
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(adress);
     49c:	81 2f       	mov	r24, r17
     49e:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(mask);
     4a2:	8d 2f       	mov	r24, r29
     4a4:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(data);
     4a8:	8c 2f       	mov	r24, r28
     4aa:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	SET(MCP2515_CS);
     4ae:	29 9a       	sbi	0x05, 1	; 5
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <_Z19mcp2515_read_statush>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
     4b8:	29 98       	cbi	0x05, 1	; 5
	
	spi_putc(type);
     4ba:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	data = spi_putc(0xff);
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	SET(MCP2515_CS);
     4c4:	29 9a       	sbi	0x05, 1	; 5
	
	return data;
}
     4c6:	08 95       	ret

000004c8 <_Z18mcp2515_configRateh>:
/*********************************************************************************************************
** Function name:           mcp2515_configRate
** Descriptions:            set boadrate
*********************************************************************************************************/
u8 mcp2515_configRate(const u8 canSpeed)
{
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
	u8 set, cfg1, cfg2, cfg3;
	set = 1;
	switch (canSpeed)
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	fc 01       	movw	r30, r24
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	e2 31       	cpi	r30, 0x12	; 18
     4d8:	f1 05       	cpc	r31, r1
     4da:	08 f0       	brcs	.+2      	; 0x4de <_Z18mcp2515_configRateh+0x16>
     4dc:	6a c0       	rjmp	.+212    	; 0x5b2 <_Z18mcp2515_configRateh+0xea>
     4de:	ec 5c       	subi	r30, 0xCC	; 204
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__tablejump2__>
		break;
		
		case (CAN_25KBPS):
		cfg1 = MCP_16MHz_25kBPS_CFG1;
		cfg2 = MCP_16MHz_25kBPS_CFG2;
		cfg3 = MCP_16MHz_25kBPS_CFG3;
     4e6:	17 e0       	ldi	r17, 0x07	; 7
		cfg3 = MCP_16MHz_20kBPS_CFG3;
		break;
		
		case (CAN_25KBPS):
		cfg1 = MCP_16MHz_25kBPS_CFG1;
		cfg2 = MCP_16MHz_25kBPS_CFG2;
     4e8:	da eb       	ldi	r29, 0xBA	; 186
		cfg2 = MCP_16MHz_20kBPS_CFG2;
		cfg3 = MCP_16MHz_20kBPS_CFG3;
		break;
		
		case (CAN_25KBPS):
		cfg1 = MCP_16MHz_25kBPS_CFG1;
     4ea:	cf e0       	ldi	r28, 0x0F	; 15
		cfg2 = MCP_16MHz_25kBPS_CFG2;
		cfg3 = MCP_16MHz_25kBPS_CFG3;
		break;
     4ec:	3b c0       	rjmp	.+118    	; 0x564 <_Z18mcp2515_configRateh+0x9c>
		
		case (CAN_31K25BPS):
		cfg1 = MCP_16MHz_31k25BPS_CFG1;
		cfg2 = MCP_16MHz_31k25BPS_CFG2;
		cfg3 = MCP_16MHz_31k25BPS_CFG3;
     4ee:	15 e8       	ldi	r17, 0x85	; 133
		cfg3 = MCP_16MHz_25kBPS_CFG3;
		break;
		
		case (CAN_31K25BPS):
		cfg1 = MCP_16MHz_31k25BPS_CFG1;
		cfg2 = MCP_16MHz_31k25BPS_CFG2;
     4f0:	d1 ef       	ldi	r29, 0xF1	; 241
		cfg2 = MCP_16MHz_25kBPS_CFG2;
		cfg3 = MCP_16MHz_25kBPS_CFG3;
		break;
		
		case (CAN_31K25BPS):
		cfg1 = MCP_16MHz_31k25BPS_CFG1;
     4f2:	cf e0       	ldi	r28, 0x0F	; 15
		cfg2 = MCP_16MHz_31k25BPS_CFG2;
		cfg3 = MCP_16MHz_31k25BPS_CFG3;
		break;
     4f4:	37 c0       	rjmp	.+110    	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_33KBPS):
		cfg1 = MCP_16MHz_33kBPS_CFG1;
		cfg2 = MCP_16MHz_33kBPS_CFG2;
		cfg3 = MCP_16MHz_33kBPS_CFG3;
     4f6:	17 e0       	ldi	r17, 0x07	; 7
		cfg3 = MCP_16MHz_31k25BPS_CFG3;
		break;

		case (CAN_33KBPS):
		cfg1 = MCP_16MHz_33kBPS_CFG1;
		cfg2 = MCP_16MHz_33kBPS_CFG2;
     4f8:	de eb       	ldi	r29, 0xBE	; 190
		cfg2 = MCP_16MHz_31k25BPS_CFG2;
		cfg3 = MCP_16MHz_31k25BPS_CFG3;
		break;

		case (CAN_33KBPS):
		cfg1 = MCP_16MHz_33kBPS_CFG1;
     4fa:	c9 e0       	ldi	r28, 0x09	; 9
		cfg2 = MCP_16MHz_33kBPS_CFG2;
		cfg3 = MCP_16MHz_33kBPS_CFG3;
		break;
     4fc:	33 c0       	rjmp	.+102    	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_40KBPS):
		cfg1 = MCP_16MHz_40kBPS_CFG1;
		cfg2 = MCP_16MHz_40kBPS_CFG2;
		cfg3 = MCP_16MHz_40kBPS_CFG3;
     4fe:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_33kBPS_CFG3;
		break;

		case (CAN_40KBPS):
		cfg1 = MCP_16MHz_40kBPS_CFG1;
		cfg2 = MCP_16MHz_40kBPS_CFG2;
     500:	df ef       	ldi	r29, 0xFF	; 255
		cfg2 = MCP_16MHz_33kBPS_CFG2;
		cfg3 = MCP_16MHz_33kBPS_CFG3;
		break;

		case (CAN_40KBPS):
		cfg1 = MCP_16MHz_40kBPS_CFG1;
     502:	c7 e0       	ldi	r28, 0x07	; 7
		cfg2 = MCP_16MHz_40kBPS_CFG2;
		cfg3 = MCP_16MHz_40kBPS_CFG3;
		break;
     504:	2f c0       	rjmp	.+94     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_50KBPS):
		cfg1 = MCP_16MHz_50kBPS_CFG1;
		cfg2 = MCP_16MHz_50kBPS_CFG2;
		cfg3 = MCP_16MHz_50kBPS_CFG3;
     506:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_40kBPS_CFG3;
		break;

		case (CAN_50KBPS):
		cfg1 = MCP_16MHz_50kBPS_CFG1;
		cfg2 = MCP_16MHz_50kBPS_CFG2;
     508:	da ef       	ldi	r29, 0xFA	; 250
		cfg2 = MCP_16MHz_40kBPS_CFG2;
		cfg3 = MCP_16MHz_40kBPS_CFG3;
		break;

		case (CAN_50KBPS):
		cfg1 = MCP_16MHz_50kBPS_CFG1;
     50a:	c7 e0       	ldi	r28, 0x07	; 7
		cfg2 = MCP_16MHz_50kBPS_CFG2;
		cfg3 = MCP_16MHz_50kBPS_CFG3;
		break;
     50c:	2b c0       	rjmp	.+86     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_80KBPS):
		cfg1 = MCP_16MHz_80kBPS_CFG1;
		cfg2 = MCP_16MHz_80kBPS_CFG2;
		cfg3 = MCP_16MHz_80kBPS_CFG3;
     50e:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_50kBPS_CFG3;
		break;

		case (CAN_80KBPS):
		cfg1 = MCP_16MHz_80kBPS_CFG1;
		cfg2 = MCP_16MHz_80kBPS_CFG2;
     510:	df ef       	ldi	r29, 0xFF	; 255
		cfg2 = MCP_16MHz_50kBPS_CFG2;
		cfg3 = MCP_16MHz_50kBPS_CFG3;
		break;

		case (CAN_80KBPS):
		cfg1 = MCP_16MHz_80kBPS_CFG1;
     512:	c3 e0       	ldi	r28, 0x03	; 3
		cfg2 = MCP_16MHz_80kBPS_CFG2;
		cfg3 = MCP_16MHz_80kBPS_CFG3;
		break;
     514:	27 c0       	rjmp	.+78     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_83K3BPS):
		cfg1 = MCP_16MHz_83k3BPS_CFG1;
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
		cfg3 = MCP_16MHz_83k3BPS_CFG3;
     516:	17 e0       	ldi	r17, 0x07	; 7
		cfg3 = MCP_16MHz_80kBPS_CFG3;
		break;

		case (CAN_83K3BPS):
		cfg1 = MCP_16MHz_83k3BPS_CFG1;
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
     518:	de eb       	ldi	r29, 0xBE	; 190
		cfg2 = MCP_16MHz_80kBPS_CFG2;
		cfg3 = MCP_16MHz_80kBPS_CFG3;
		break;

		case (CAN_83K3BPS):
		cfg1 = MCP_16MHz_83k3BPS_CFG1;
     51a:	c3 e0       	ldi	r28, 0x03	; 3
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
		cfg3 = MCP_16MHz_83k3BPS_CFG3;
		break;
     51c:	23 c0       	rjmp	.+70     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_95KBPS):
		cfg1 = MCP_16MHz_95kBPS_CFG1;
		cfg2 = MCP_16MHz_95kBPS_CFG2;
		cfg3 = MCP_16MHz_95kBPS_CFG3;
     51e:	17 e0       	ldi	r17, 0x07	; 7
		cfg3 = MCP_16MHz_83k3BPS_CFG3;
		break;

		case (CAN_95KBPS):
		cfg1 = MCP_16MHz_95kBPS_CFG1;
		cfg2 = MCP_16MHz_95kBPS_CFG2;
     520:	dd ea       	ldi	r29, 0xAD	; 173
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
		cfg3 = MCP_16MHz_83k3BPS_CFG3;
		break;

		case (CAN_95KBPS):
		cfg1 = MCP_16MHz_95kBPS_CFG1;
     522:	c3 e0       	ldi	r28, 0x03	; 3
		cfg2 = MCP_16MHz_95kBPS_CFG2;
		cfg3 = MCP_16MHz_95kBPS_CFG3;
		break;
     524:	1f c0       	rjmp	.+62     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_100KBPS):                                             /* 100KBPS                  */
		cfg1 = MCP_16MHz_100kBPS_CFG1;
		cfg2 = MCP_16MHz_100kBPS_CFG2;
		cfg3 = MCP_16MHz_100kBPS_CFG3;
     526:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_95kBPS_CFG3;
		break;

		case (CAN_100KBPS):                                             /* 100KBPS                  */
		cfg1 = MCP_16MHz_100kBPS_CFG1;
		cfg2 = MCP_16MHz_100kBPS_CFG2;
     528:	da ef       	ldi	r29, 0xFA	; 250
		cfg2 = MCP_16MHz_95kBPS_CFG2;
		cfg3 = MCP_16MHz_95kBPS_CFG3;
		break;

		case (CAN_100KBPS):                                             /* 100KBPS                  */
		cfg1 = MCP_16MHz_100kBPS_CFG1;
     52a:	c3 e0       	ldi	r28, 0x03	; 3
		cfg2 = MCP_16MHz_100kBPS_CFG2;
		cfg3 = MCP_16MHz_100kBPS_CFG3;
		break;
     52c:	1b c0       	rjmp	.+54     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_125KBPS):
		cfg1 = MCP_16MHz_125kBPS_CFG1;
		cfg2 = MCP_16MHz_125kBPS_CFG2;
		cfg3 = MCP_16MHz_125kBPS_CFG3;
     52e:	16 e8       	ldi	r17, 0x86	; 134
		cfg3 = MCP_16MHz_100kBPS_CFG3;
		break;

		case (CAN_125KBPS):
		cfg1 = MCP_16MHz_125kBPS_CFG1;
		cfg2 = MCP_16MHz_125kBPS_CFG2;
     530:	d0 ef       	ldi	r29, 0xF0	; 240
		cfg2 = MCP_16MHz_100kBPS_CFG2;
		cfg3 = MCP_16MHz_100kBPS_CFG3;
		break;

		case (CAN_125KBPS):
		cfg1 = MCP_16MHz_125kBPS_CFG1;
     532:	c3 e0       	ldi	r28, 0x03	; 3
		cfg2 = MCP_16MHz_125kBPS_CFG2;
		cfg3 = MCP_16MHz_125kBPS_CFG3;
		break;
     534:	17 c0       	rjmp	.+46     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_200KBPS):
		cfg1 = MCP_16MHz_200kBPS_CFG1;
		cfg2 = MCP_16MHz_200kBPS_CFG2;
		cfg3 = MCP_16MHz_200kBPS_CFG3;
     536:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_125kBPS_CFG3;
		break;

		case (CAN_200KBPS):
		cfg1 = MCP_16MHz_200kBPS_CFG1;
		cfg2 = MCP_16MHz_200kBPS_CFG2;
     538:	da ef       	ldi	r29, 0xFA	; 250
		cfg2 = MCP_16MHz_125kBPS_CFG2;
		cfg3 = MCP_16MHz_125kBPS_CFG3;
		break;

		case (CAN_200KBPS):
		cfg1 = MCP_16MHz_200kBPS_CFG1;
     53a:	c1 e0       	ldi	r28, 0x01	; 1
		cfg2 = MCP_16MHz_200kBPS_CFG2;
		cfg3 = MCP_16MHz_200kBPS_CFG3;
		break;
     53c:	13 c0       	rjmp	.+38     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_250KBPS):
		cfg1 = MCP_16MHz_250kBPS_CFG1;
		cfg2 = MCP_16MHz_250kBPS_CFG2;
		cfg3 = MCP_16MHz_250kBPS_CFG3;
     53e:	15 e8       	ldi	r17, 0x85	; 133
		cfg3 = MCP_16MHz_200kBPS_CFG3;
		break;

		case (CAN_250KBPS):
		cfg1 = MCP_16MHz_250kBPS_CFG1;
		cfg2 = MCP_16MHz_250kBPS_CFG2;
     540:	d1 ef       	ldi	r29, 0xF1	; 241
		cfg2 = MCP_16MHz_200kBPS_CFG2;
		cfg3 = MCP_16MHz_200kBPS_CFG3;
		break;

		case (CAN_250KBPS):
		cfg1 = MCP_16MHz_250kBPS_CFG1;
     542:	c1 e4       	ldi	r28, 0x41	; 65
		cfg2 = MCP_16MHz_250kBPS_CFG2;
		cfg3 = MCP_16MHz_250kBPS_CFG3;
		break;
     544:	0f c0       	rjmp	.+30     	; 0x564 <_Z18mcp2515_configRateh+0x9c>

		case (CAN_500KBPS):
		cfg1 = MCP_16MHz_500kBPS_CFG1;
		cfg2 = MCP_16MHz_500kBPS_CFG2;
		cfg3 = MCP_16MHz_500kBPS_CFG3;
     546:	16 e8       	ldi	r17, 0x86	; 134
		cfg3 = MCP_16MHz_250kBPS_CFG3;
		break;

		case (CAN_500KBPS):
		cfg1 = MCP_16MHz_500kBPS_CFG1;
		cfg2 = MCP_16MHz_500kBPS_CFG2;
     548:	d0 ef       	ldi	r29, 0xF0	; 240
		cfg2 = MCP_16MHz_250kBPS_CFG2;
		cfg3 = MCP_16MHz_250kBPS_CFG3;
		break;

		case (CAN_500KBPS):
		cfg1 = MCP_16MHz_500kBPS_CFG1;
     54a:	c0 e0       	ldi	r28, 0x00	; 0
		cfg2 = MCP_16MHz_500kBPS_CFG2;
		cfg3 = MCP_16MHz_500kBPS_CFG3;
		break;
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_Z18mcp2515_configRateh+0x9c>
		
		case (CAN_666KBPS):
		cfg1 = MCP_16MHz_666kBPS_CFG1;
		cfg2 = MCP_16MHz_666kBPS_CFG2;
		cfg3 = MCP_16MHz_666kBPS_CFG3;
     54e:	14 e0       	ldi	r17, 0x04	; 4
		cfg3 = MCP_16MHz_500kBPS_CFG3;
		break;
		
		case (CAN_666KBPS):
		cfg1 = MCP_16MHz_666kBPS_CFG1;
		cfg2 = MCP_16MHz_666kBPS_CFG2;
     550:	d0 ea       	ldi	r29, 0xA0	; 160
		cfg2 = MCP_16MHz_500kBPS_CFG2;
		cfg3 = MCP_16MHz_500kBPS_CFG3;
		break;
		
		case (CAN_666KBPS):
		cfg1 = MCP_16MHz_666kBPS_CFG1;
     552:	c0 e0       	ldi	r28, 0x00	; 0
		cfg2 = MCP_16MHz_666kBPS_CFG2;
		cfg3 = MCP_16MHz_666kBPS_CFG3;
		break;
     554:	07 c0       	rjmp	.+14     	; 0x564 <_Z18mcp2515_configRateh+0x9c>
		
		case (CAN_1000KBPS):
		cfg1 = MCP_16MHz_1000kBPS_CFG1;
		cfg2 = MCP_16MHz_1000kBPS_CFG2;
		cfg3 = MCP_16MHz_1000kBPS_CFG3;
     556:	12 e8       	ldi	r17, 0x82	; 130
		cfg3 = MCP_16MHz_666kBPS_CFG3;
		break;
		
		case (CAN_1000KBPS):
		cfg1 = MCP_16MHz_1000kBPS_CFG1;
		cfg2 = MCP_16MHz_1000kBPS_CFG2;
     558:	d0 ed       	ldi	r29, 0xD0	; 208
		cfg2 = MCP_16MHz_666kBPS_CFG2;
		cfg3 = MCP_16MHz_666kBPS_CFG3;
		break;
		
		case (CAN_1000KBPS):
		cfg1 = MCP_16MHz_1000kBPS_CFG1;
     55a:	c0 e0       	ldi	r28, 0x00	; 0
		cfg2 = MCP_16MHz_1000kBPS_CFG2;
		cfg3 = MCP_16MHz_1000kBPS_CFG3;
		break;
     55c:	03 c0       	rjmp	.+6      	; 0x564 <_Z18mcp2515_configRateh+0x9c>
	switch (canSpeed)
	{
		case (CAN_5KBPS):
		cfg1 = MCP_16MHz_5kBPS_CFG1;
		cfg2 = MCP_16MHz_5kBPS_CFG2;
		cfg3 = MCP_16MHz_5kBPS_CFG3;
     55e:	17 e8       	ldi	r17, 0x87	; 135
	set = 1;
	switch (canSpeed)
	{
		case (CAN_5KBPS):
		cfg1 = MCP_16MHz_5kBPS_CFG1;
		cfg2 = MCP_16MHz_5kBPS_CFG2;
     560:	df ef       	ldi	r29, 0xFF	; 255
	u8 set, cfg1, cfg2, cfg3;
	set = 1;
	switch (canSpeed)
	{
		case (CAN_5KBPS):
		cfg1 = MCP_16MHz_5kBPS_CFG1;
     562:	cf e3       	ldi	r28, 0x3F	; 63
		set = 0;
		break;
	}
	
	if (set) {
		mcp2515_write_register(CNF1,cfg1);
     564:	6c 2f       	mov	r22, r28
     566:	8a e2       	ldi	r24, 0x2A	; 42
     568:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
		mcp2515_write_register(CNF2,cfg2);
     56c:	6d 2f       	mov	r22, r29
     56e:	89 e2       	ldi	r24, 0x29	; 41
     570:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
		mcp2515_write_register(CNF3,cfg3);// Bitrate 100 kbps at 8 MHz
     574:	61 2f       	mov	r22, r17
     576:	88 e2       	ldi	r24, 0x28	; 40
     578:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>

		// test if we could read back the value => is the chip accessible?
		if ((mcp2515_read_register(CNF1) != cfg1) &  (mcp2515_read_register(CNF2) != cfg2) & (mcp2515_read_register(CNF3) != cfg3)) return false;
     57c:	8a e2       	ldi	r24, 0x2A	; 42
     57e:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     582:	01 e0       	ldi	r16, 0x01	; 1
     584:	8c 13       	cpse	r24, r28
     586:	01 c0       	rjmp	.+2      	; 0x58a <_Z18mcp2515_configRateh+0xc2>
     588:	00 e0       	ldi	r16, 0x00	; 0
     58a:	89 e2       	ldi	r24, 0x29	; 41
     58c:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	8d 13       	cpse	r24, r29
     594:	01 c0       	rjmp	.+2      	; 0x598 <_Z18mcp2515_configRateh+0xd0>
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	09 23       	and	r16, r25
     59a:	88 e2       	ldi	r24, 0x28	; 40
     59c:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	81 13       	cpse	r24, r17
     5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <_Z18mcp2515_configRateh+0xe0>
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 23       	and	r25, r16
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	89 2f       	mov	r24, r25
     5ae:	82 27       	eor	r24, r18
     5b0:	0a c0       	rjmp	.+20     	; 0x5c6 <_Z18mcp2515_configRateh+0xfe>
		else return true;
	}
	else {
		return false;
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <_Z18mcp2515_configRateh+0xfe>
		break;

		case (CAN_10KBPS):
		cfg1 = MCP_16MHz_10kBPS_CFG1;
		cfg2 = MCP_16MHz_10kBPS_CFG2;
		cfg3 = MCP_16MHz_10kBPS_CFG3;
     5b6:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_5kBPS_CFG3;
		break;

		case (CAN_10KBPS):
		cfg1 = MCP_16MHz_10kBPS_CFG1;
		cfg2 = MCP_16MHz_10kBPS_CFG2;
     5b8:	df ef       	ldi	r29, 0xFF	; 255
		cfg2 = MCP_16MHz_5kBPS_CFG2;
		cfg3 = MCP_16MHz_5kBPS_CFG3;
		break;

		case (CAN_10KBPS):
		cfg1 = MCP_16MHz_10kBPS_CFG1;
     5ba:	cf e1       	ldi	r28, 0x1F	; 31
     5bc:	d3 cf       	rjmp	.-90     	; 0x564 <_Z18mcp2515_configRateh+0x9c>
		break;

		case (CAN_20KBPS):
		cfg1 = MCP_16MHz_20kBPS_CFG1;
		cfg2 = MCP_16MHz_20kBPS_CFG2;
		cfg3 = MCP_16MHz_20kBPS_CFG3;
     5be:	17 e8       	ldi	r17, 0x87	; 135
		cfg3 = MCP_16MHz_10kBPS_CFG3;
		break;

		case (CAN_20KBPS):
		cfg1 = MCP_16MHz_20kBPS_CFG1;
		cfg2 = MCP_16MHz_20kBPS_CFG2;
     5c0:	df ef       	ldi	r29, 0xFF	; 255
		cfg2 = MCP_16MHz_10kBPS_CFG2;
		cfg3 = MCP_16MHz_10kBPS_CFG3;
		break;

		case (CAN_20KBPS):
		cfg1 = MCP_16MHz_20kBPS_CFG1;
     5c2:	cf e0       	ldi	r28, 0x0F	; 15
     5c4:	cf cf       	rjmp	.-98     	; 0x564 <_Z18mcp2515_configRateh+0x9c>
		else return true;
	}
	else {
		return false;
	}
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <_Z12mcp2515_initv>:
// -------------------------------------------------------------------------
bool mcp2515_init(void)
{
	SET(MCP2515_CS);
     5d0:	29 9a       	sbi	0x05, 1	; 5
	SET_OUTPUT(MCP2515_CS);
     5d2:	21 9a       	sbi	0x04, 1	; 4
	
	RESET(P_SCK);
     5d4:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MOSI);
     5d6:	2b 98       	cbi	0x05, 3	; 5
	RESET(P_MISO);
     5d8:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
     5da:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
     5dc:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
     5de:	24 98       	cbi	0x04, 4	; 4
	
	SET_INPUT(MCP2515_INT);
     5e0:	52 98       	cbi	0x0a, 2	; 10
	SET(MCP2515_INT);
     5e2:	5a 9a       	sbi	0x0b, 2	; 11
	
	// active SPI master interface
	SPCR = (1<<SPE)|(1<<MSTR) | (0<<SPR1)|(1<<SPR0);
     5e4:	81 e5       	ldi	r24, 0x51	; 81
     5e6:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
     5e8:	1d bc       	out	0x2d, r1	; 45
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	RESET(MCP2515_CS);
     5ea:	29 98       	cbi	0x05, 1	; 5
	spi_putc(SPI_RESET);
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	SET(MCP2515_CS);
     5f2:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f4:	85 e3       	ldi	r24, 0x35	; 53
     5f6:	8a 95       	dec	r24
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <_Z12mcp2515_initv+0x26>
     5fa:	00 00       	nop
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	if (!mcp2515_configRate(CAN_200KBPS)) return false;
     5fc:	8e e0       	ldi	r24, 0x0E	; 14
     5fe:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_Z18mcp2515_configRateh>
     602:	88 23       	and	r24, r24
     604:	d1 f0       	breq	.+52     	; 0x63a <_Z12mcp2515_initv+0x6a>
	
//
	// activate interrupts
	mcp2515_write_register(CANINTE,(1<<RX1IE)|(1<<RX0IE));//| (1<<MERRE) | (1<<ERRIE)); 
     606:	63 e0       	ldi	r22, 0x03	; 3
     608:	8b e2       	ldi	r24, 0x2B	; 43
     60a:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
	
	
	// deaktivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	8c e0       	ldi	r24, 0x0C	; 12
     612:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	8d e0       	ldi	r24, 0x0D	; 13
     61a:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
	
	// turn off filters => receive any message
	mcp2515_write_register(RXB0CTRL, (1<<RXM1)|(1<<RXM0));
     61e:	60 e6       	ldi	r22, 0x60	; 96
     620:	80 e6       	ldi	r24, 0x60	; 96
     622:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
	mcp2515_write_register(RXB1CTRL, (1<<RXM1)|(1<<RXM0));
     626:	60 e6       	ldi	r22, 0x60	; 96
     628:	80 e7       	ldi	r24, 0x70	; 112
     62a:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	8f e0       	ldi	r24, 0x0F	; 15
     632:	0e 94 23 02 	call	0x446	; 0x446 <_Z22mcp2515_write_registerhh>

	return true;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	08 95       	ret
	spi_putc(SPI_RESET);
	SET(MCP2515_CS);
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	if (!mcp2515_configRate(CAN_200KBPS)) return false;
     63a:	80 e0       	ldi	r24, 0x00	; 0
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);

	return true;
}
     63c:	08 95       	ret

0000063e <_Z21mcp2515_check_messagev>:

// ----------------------------------------------------------------------------
// check if there are any new messages waiting

uint8_t mcp2515_check_message(void) {
	return (!IS_SET(MCP2515_INT));
     63e:	89 b1       	in	r24, 0x09	; 9
     640:	82 fb       	bst	r24, 2
     642:	88 27       	eor	r24, r24
     644:	80 f9       	bld	r24, 0
}
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	89 27       	eor	r24, r25
     64a:	08 95       	ret

0000064c <_Z19mcp2515_get_messageP4tCAN>:
	return true;
}

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	1f 92       	push	r1
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	7c 01       	movw	r14, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
     660:	80 eb       	ldi	r24, 0xB0	; 176
     662:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z19mcp2515_read_statush>
     666:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	86 fd       	sbrc	r24, 6
     66c:	06 c0       	rjmp	.+12     	; 0x67a <_Z19mcp2515_get_messageP4tCAN+0x2e>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	88 23       	and	r24, r24
     672:	0c f0       	brlt	.+2      	; 0x676 <_Z19mcp2515_get_messageP4tCAN+0x2a>
     674:	65 c0       	rjmp	.+202    	; 0x740 <_Z19mcp2515_get_messageP4tCAN+0xf4>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
     676:	84 e9       	ldi	r24, 0x94	; 148
     678:	01 c0       	rjmp	.+2      	; 0x67c <_Z19mcp2515_get_messageP4tCAN+0x30>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
     67a:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
     67c:	29 98       	cbi	0x05, 1	; 5
	spi_putc(addr);
     67e:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
     688:	28 e0       	ldi	r18, 0x08	; 8
     68a:	82 9f       	mul	r24, r18
     68c:	c0 01       	movw	r24, r0
     68e:	11 24       	eor	r1, r1
     690:	f7 01       	movw	r30, r14
     692:	91 83       	std	Z+1, r25	; 0x01
     694:	80 83       	st	Z, r24
	message->id |=            spi_putc(0xff) >> 5;
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	95 95       	asr	r25
     6a0:	87 95       	ror	r24
     6a2:	95 95       	asr	r25
     6a4:	87 95       	ror	r24
     6a6:	95 95       	asr	r25
     6a8:	87 95       	ror	r24
     6aa:	95 95       	asr	r25
     6ac:	87 95       	ror	r24
     6ae:	95 95       	asr	r25
     6b0:	87 95       	ror	r24
     6b2:	f7 01       	movw	r30, r14
     6b4:	20 81       	ld	r18, Z
     6b6:	31 81       	ldd	r19, Z+1	; 0x01
     6b8:	82 2b       	or	r24, r18
     6ba:	93 2b       	or	r25, r19
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
	
	spi_putc(0xff);
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(0xff);
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
     6d2:	8f 70       	andi	r24, 0x0F	; 15
	
	message->header.length = length;
     6d4:	28 2f       	mov	r18, r24
     6d6:	22 0f       	add	r18, r18
     6d8:	f7 01       	movw	r30, r14
     6da:	92 81       	ldd	r25, Z+2	; 0x02
     6dc:	91 7e       	andi	r25, 0xE1	; 225
     6de:	92 2b       	or	r25, r18
     6e0:	92 83       	std	Z+2, r25	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
     6e2:	29 81       	ldd	r18, Y+1	; 0x01
     6e4:	23 fb       	bst	r18, 3
     6e6:	22 27       	eor	r18, r18
     6e8:	20 f9       	bld	r18, 0
     6ea:	21 95       	neg	r18
     6ec:	20 fb       	bst	r18, 0
     6ee:	90 f9       	bld	r25, 0
     6f0:	92 83       	std	Z+2, r25	; 0x02
	
	// read data
	for (uint8_t i=0;i<length;i++) {
     6f2:	88 23       	and	r24, r24
     6f4:	91 f0       	breq	.+36     	; 0x71a <_Z19mcp2515_get_messageP4tCAN+0xce>
     6f6:	87 01       	movw	r16, r14
     6f8:	0d 5f       	subi	r16, 0xFD	; 253
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	f4 e0       	ldi	r31, 0x04	; 4
     6fe:	ef 0e       	add	r14, r31
     700:	f1 1c       	adc	r15, r1
     702:	81 50       	subi	r24, 0x01	; 1
     704:	e8 0e       	add	r14, r24
     706:	f1 1c       	adc	r15, r1
		message->data[i] = spi_putc(0xff);
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
     70e:	f8 01       	movw	r30, r16
     710:	81 93       	st	Z+, r24
     712:	8f 01       	movw	r16, r30
	
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
     714:	ee 15       	cp	r30, r14
     716:	ff 05       	cpc	r31, r15
     718:	b9 f7       	brne	.-18     	; 0x708 <_Z19mcp2515_get_messageP4tCAN+0xbc>
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
     71a:	29 9a       	sbi	0x05, 1	; 5
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	86 ff       	sbrs	r24, 6
     720:	06 c0       	rjmp	.+12     	; 0x72e <_Z19mcp2515_get_messageP4tCAN+0xe2>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	8c e2       	ldi	r24, 0x2C	; 44
     728:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
     72c:	05 c0       	rjmp	.+10     	; 0x738 <_Z19mcp2515_get_messageP4tCAN+0xec>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	62 e0       	ldi	r22, 0x02	; 2
     732:	8c e2       	ldi	r24, 0x2C	; 44
     734:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
	}
	
	return (status & 0x07) + 1;
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	87 70       	andi	r24, 0x07	; 7
     73c:	8f 5f       	subi	r24, 0xFF	; 255
     73e:	01 c0       	rjmp	.+2      	; 0x742 <_Z19mcp2515_get_messageP4tCAN+0xf6>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
	}
	else {
		// Error: no message available
		return 0;
     740:	80 e0       	ldi	r24, 0x00	; 0
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
     742:	0f 90       	pop	r0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_Z20mcp2515_send_messageP4tCAN>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	1f 92       	push	r1
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
     768:	80 ea       	ldi	r24, 0xA0	; 160
     76a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z19mcp2515_read_statush>
     76e:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	82 ff       	sbrs	r24, 2
     774:	0a c0       	rjmp	.+20     	; 0x78a <_Z20mcp2515_send_messageP4tCAN+0x38>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	84 ff       	sbrs	r24, 4
     77a:	09 c0       	rjmp	.+18     	; 0x78e <_Z20mcp2515_send_messageP4tCAN+0x3c>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	86 fd       	sbrc	r24, 6
     780:	56 c0       	rjmp	.+172    	; 0x82e <_Z20mcp2515_send_messageP4tCAN+0xdc>
		address = 0x04;
     782:	68 94       	set
     784:	dd 24       	eor	r13, r13
     786:	d2 f8       	bld	r13, 2
     788:	05 c0       	rjmp	.+10     	; 0x794 <_Z20mcp2515_send_messageP4tCAN+0x42>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
     78a:	d1 2c       	mov	r13, r1
     78c:	03 c0       	rjmp	.+6      	; 0x794 <_Z20mcp2515_send_messageP4tCAN+0x42>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
     78e:	68 94       	set
     790:	dd 24       	eor	r13, r13
     792:	d1 f8       	bld	r13, 1
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
     794:	29 98       	cbi	0x05, 1	; 5
	spi_putc(SPI_WRITE_TX | address);
     796:	8d 2d       	mov	r24, r13
     798:	80 64       	ori	r24, 0x40	; 64
     79a:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	spi_putc(message->id >> 3);
     79e:	f8 01       	movw	r30, r16
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	c9 01       	movw	r24, r18
     7a6:	96 95       	lsr	r25
     7a8:	87 95       	ror	r24
     7aa:	96 95       	lsr	r25
     7ac:	87 95       	ror	r24
     7ae:	96 95       	lsr	r25
     7b0:	87 95       	ror	r24
     7b2:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
    spi_putc(message->id << 5);
     7b6:	f8 01       	movw	r30, r16
     7b8:	80 81       	ld	r24, Z
     7ba:	82 95       	swap	r24
     7bc:	88 0f       	add	r24, r24
     7be:	80 7e       	andi	r24, 0xE0	; 224
     7c0:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	spi_putc(0);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	spi_putc(0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	
	uint8_t length = message->header.length & 0x0f;
     7d0:	f8 01       	movw	r30, r16
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	e8 2e       	mov	r14, r24
     7d6:	e6 94       	lsr	r14
     7d8:	fe 2d       	mov	r31, r14
     7da:	ff 70       	andi	r31, 0x0F	; 15
     7dc:	ef 2e       	mov	r14, r31
	
	if (message->header.rtr) {
     7de:	80 ff       	sbrs	r24, 0
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <_Z20mcp2515_send_messageP4tCAN+0x9a>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
     7e2:	8f 2f       	mov	r24, r31
     7e4:	80 64       	ori	r24, 0x40	; 64
     7e6:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
     7ea:	10 c0       	rjmp	.+32     	; 0x80c <_Z20mcp2515_send_messageP4tCAN+0xba>
	}
	else {
		// set message length
		spi_putc(length);
     7ec:	8f 2f       	mov	r24, r31
     7ee:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
		
		// data
		for (uint8_t i=0;i<length;i++) {
     7f2:	ee 20       	and	r14, r14
     7f4:	59 f0       	breq	.+22     	; 0x80c <_Z20mcp2515_send_messageP4tCAN+0xba>
     7f6:	0d 5f       	subi	r16, 0xFD	; 253
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	f1 2c       	mov	r15, r1
			spi_putc(message->data[i]);
     7fc:	f8 01       	movw	r30, r16
     7fe:	81 91       	ld	r24, Z+
     800:	8f 01       	movw	r16, r30
     802:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
     806:	f3 94       	inc	r15
     808:	fe 14       	cp	r15, r14
     80a:	c0 f3       	brcs	.-16     	; 0x7fc <_Z20mcp2515_send_messageP4tCAN+0xaa>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
     80c:	29 9a       	sbi	0x05, 1	; 5
     80e:	f5 e0       	ldi	r31, 0x05	; 5
     810:	fa 95       	dec	r31
     812:	f1 f7       	brne	.-4      	; 0x810 <_Z20mcp2515_send_messageP4tCAN+0xbe>
     814:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
     816:	29 98       	cbi	0x05, 1	; 5
	address = (address == 0) ? 1 : address;
     818:	d1 10       	cpse	r13, r1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <_Z20mcp2515_send_messageP4tCAN+0xce>
     81c:	dd 24       	eor	r13, r13
     81e:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
     820:	8d 2d       	mov	r24, r13
     822:	80 68       	ori	r24, 0x80	; 128
     824:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8spi_putch>
	SET(MCP2515_CS);
     828:	29 9a       	sbi	0x05, 1	; 5
	
	return address;
     82a:	8d 2d       	mov	r24, r13
     82c:	01 c0       	rjmp	.+2      	; 0x830 <_Z20mcp2515_send_messageP4tCAN+0xde>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
     82e:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	08 95       	ret

00000842 <_Z11therm_resetv>:

uint8_t therm_reset()
{
	uint8_t i;
	//Pull line low and wait for 480uS
	THERM_LOW();
     842:	45 98       	cbi	0x08, 5	; 8
	
	THERM_OUTPUT_MODE();
     844:	3d 9a       	sbi	0x07, 5	; 7
     846:	8f e7       	ldi	r24, 0x7F	; 127
     848:	97 e0       	ldi	r25, 0x07	; 7
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <_Z11therm_resetv+0x8>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <_Z11therm_resetv+0xe>
     850:	00 00       	nop
	_delay_us(480);

	//Release line and wait for 60uS
	THERM_INPUT_MODE();
     852:	3d 98       	cbi	0x07, 5	; 7
     854:	ef ee       	ldi	r30, 0xEF	; 239
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <_Z11therm_resetv+0x16>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <_Z11therm_resetv+0x1c>
     85e:	00 00       	nop
	_delay_us(60);
;
	//Store line value and wait until the completion of 480uS period
	i=(THERM_PIN & (1<<THERM_DQ));
     860:	86 b1       	in	r24, 0x06	; 6
     862:	ef e8       	ldi	r30, 0x8F	; 143
     864:	f6 e0       	ldi	r31, 0x06	; 6
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <_Z11therm_resetv+0x24>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <_Z11therm_resetv+0x2a>
     86c:	00 00       	nop
	_delay_us(420);

	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;
}
     86e:	80 72       	andi	r24, 0x20	; 32
     870:	08 95       	ret

00000872 <_Z15therm_write_bith>:

void therm_write_bit(uint8_t bit)
{
	//Pull line low for 1uS
	THERM_LOW();
     872:	45 98       	cbi	0x08, 5	; 8
	THERM_OUTPUT_MODE();
     874:	3d 9a       	sbi	0x07, 5	; 7
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	9a 95       	dec	r25
     87a:	f1 f7       	brne	.-4      	; 0x878 <_Z15therm_write_bith+0x6>
     87c:	00 00       	nop
	_delay_us(1);

	//If we want to write 1, release the line (if not will keep low)
	if(bit) THERM_INPUT_MODE();
     87e:	81 11       	cpse	r24, r1
     880:	3d 98       	cbi	0x07, 5	; 7
     882:	8f ee       	ldi	r24, 0xEF	; 239
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <_Z15therm_write_bith+0x14>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <_Z15therm_write_bith+0x1a>
     88c:	00 00       	nop
	//Wait for 60uS and release the line
	_delay_us(60);

	THERM_INPUT_MODE();
     88e:	3d 98       	cbi	0x07, 5	; 7
     890:	08 95       	ret

00000892 <_Z14therm_read_bitv>:

uint8_t therm_read_bit(void)
{
	uint8_t bit=0;
	//Pull line low for 1uS
	THERM_LOW();
     892:	45 98       	cbi	0x08, 5	; 8
	THERM_OUTPUT_MODE();
     894:	3d 9a       	sbi	0x07, 5	; 7
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	8a 95       	dec	r24
     89a:	f1 f7       	brne	.-4      	; 0x898 <_Z14therm_read_bitv+0x6>
     89c:	00 00       	nop
	_delay_us(1);
	
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
     89e:	3d 98       	cbi	0x07, 5	; 7
     8a0:	9a e4       	ldi	r25, 0x4A	; 74
     8a2:	9a 95       	dec	r25
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <_Z14therm_read_bitv+0x10>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <_Z14therm_read_bitv+0x16>
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
     8a8:	86 b1       	in	r24, 0x06	; 6
     8aa:	90 ef       	ldi	r25, 0xF0	; 240
     8ac:	9a 95       	dec	r25
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <_Z14therm_read_bitv+0x1a>

	//Wait for 45uS to end and return read value
	_delay_us(45);

	return bit;
}
     8b0:	85 fb       	bst	r24, 5
     8b2:	88 27       	eor	r24, r24
     8b4:	80 f9       	bld	r24, 0
     8b6:	08 95       	ret

000008b8 <_Z15therm_read_bytev>:

uint8_t therm_read_byte(void)
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8, n=0;
     8be:	d0 e0       	ldi	r29, 0x00	; 0
	while(i--)
	{
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit()<<7);
     8c0:	0e 94 49 04 	call	0x892	; 0x892 <_Z14therm_read_bitv>
     8c4:	20 e8       	ldi	r18, 0x80	; 128
     8c6:	82 9f       	mul	r24, r18
     8c8:	c0 01       	movw	r24, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	d6 95       	lsr	r29
     8ce:	d8 2b       	or	r29, r24
     8d0:	c1 50       	subi	r28, 0x01	; 1
}

uint8_t therm_read_byte(void)
{
	uint8_t i=8, n=0;
	while(i--)
     8d2:	b1 f7       	brne	.-20     	; 0x8c0 <_Z15therm_read_bytev+0x8>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;
}
     8d4:	8d 2f       	mov	r24, r29
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <_Z16therm_write_byteh>:

void therm_write_byte(uint8_t byte)
{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	d8 2f       	mov	r29, r24
     8e2:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8;
	while(i--)
	{
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
     8e4:	8d 2f       	mov	r24, r29
     8e6:	81 70       	andi	r24, 0x01	; 1
     8e8:	0e 94 39 04 	call	0x872	; 0x872 <_Z15therm_write_bith>
		byte>>=1;
     8ec:	d6 95       	lsr	r29
     8ee:	c1 50       	subi	r28, 0x01	; 1
}

void therm_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while(i--)
     8f0:	c9 f7       	brne	.-14     	; 0x8e4 <_Z16therm_write_byteh+0x8>
	{
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <_Z11read_serialv>:
char read_serial(void)
{
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29

int i;
	therm_reset();
     900:	0e 94 21 04 	call	0x842	; 0x842 <_Z11therm_resetv>
	therm_write_byte(THERM_CMD_READROM);
     904:	83 e3       	ldi	r24, 0x33	; 51
     906:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z16therm_write_byteh>
     90a:	09 e3       	ldi	r16, 0x39	; 57
     90c:	12 e0       	ldi	r17, 0x02	; 2
     90e:	c1 e3       	ldi	r28, 0x31	; 49
     910:	d2 e0       	ldi	r29, 0x02	; 2
	
	for (i=0;i<serial_l;i++) ROM[i]=therm_read_byte();
     912:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z15therm_read_bytev>
     916:	89 93       	st	Y+, r24
     918:	c0 17       	cp	r28, r16
     91a:	d1 07       	cpc	r29, r17
     91c:	d1 f7       	brne	.-12     	; 0x912 <__stack+0x13>
	if (ROM[0]!=0x28)	return -1; //error indien device niet matched
     91e:	80 91 31 02 	lds	r24, 0x0231
     922:	88 32       	cpi	r24, 0x28	; 40
     924:	c9 f5       	brne	.+114    	; 0x998 <__stack+0x99>
     926:	28 e3       	ldi	r18, 0x38	; 56
     928:	32 e0       	ldi	r19, 0x02	; 2
     92a:	e1 e3       	ldi	r30, 0x31	; 49
     92c:	f2 e0       	ldi	r31, 0x02	; 2
     92e:	40 e0       	ldi	r20, 0x00	; 0
UCHAR  j;
UCHAR crc = 0;
    
    for (i = 0; i < serial_l-1; i++) 
    {
        UCHAR inbyte = ROM[i];
     930:	b8 e0       	ldi	r27, 0x08	; 8
        for (j = 0; j < 8; j++) 
        {
            UCHAR mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
     932:	ac e8       	ldi	r26, 0x8C	; 140
UCHAR  j;
UCHAR crc = 0;
    
    for (i = 0; i < serial_l-1; i++) 
    {
        UCHAR inbyte = ROM[i];
     934:	61 91       	ld	r22, Z+
     936:	5b 2f       	mov	r21, r27
        for (j = 0; j < 8; j++) 
        {
            UCHAR mix = (crc ^ inbyte) & 0x01;
     938:	76 2f       	mov	r23, r22
     93a:	74 27       	eor	r23, r20
            crc >>= 1;
     93c:	84 2f       	mov	r24, r20
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	95 95       	asr	r25
     942:	87 95       	ror	r24
     944:	48 2f       	mov	r20, r24
            if (mix) crc ^= 0x8C;
     946:	70 ff       	sbrs	r23, 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
     94a:	4a 2f       	mov	r20, r26
     94c:	48 27       	eor	r20, r24
            inbyte >>= 1;
     94e:	66 95       	lsr	r22
     950:	51 50       	subi	r21, 0x01	; 1
UCHAR crc = 0;
    
    for (i = 0; i < serial_l-1; i++) 
    {
        UCHAR inbyte = ROM[i];
        for (j = 0; j < 8; j++) 
     952:	91 f7       	brne	.-28     	; 0x938 <__stack+0x39>
	if (ROM[0]!=0x28)	return -1; //error indien device niet matched

UCHAR  j;
UCHAR crc = 0;
    
    for (i = 0; i < serial_l-1; i++) 
     954:	e2 17       	cp	r30, r18
     956:	f3 07       	cpc	r31, r19
     958:	69 f7       	brne	.-38     	; 0x934 <__stack+0x35>
            inbyte >>= 1;
        }
    }


  if (( crc==ROM[7] ) & ((ROM[1]|ROM[2]|ROM[3]|ROM[4]|ROM[5]|ROM[6])!=0)) return 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 91 38 02 	lds	r25, 0x0238
     960:	49 13       	cpse	r20, r25
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	88 23       	and	r24, r24
     966:	d1 f0       	breq	.+52     	; 0x99c <__stack+0x9d>
     968:	90 91 33 02 	lds	r25, 0x0233
     96c:	80 91 32 02 	lds	r24, 0x0232
     970:	98 2b       	or	r25, r24
     972:	80 91 34 02 	lds	r24, 0x0234
     976:	98 2b       	or	r25, r24
     978:	80 91 35 02 	lds	r24, 0x0235
     97c:	98 2b       	or	r25, r24
     97e:	80 91 36 02 	lds	r24, 0x0236
     982:	98 2b       	or	r25, r24
     984:	80 91 37 02 	lds	r24, 0x0237
     988:	98 2b       	or	r25, r24
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	09 f4       	brne	.+2      	; 0x990 <__stack+0x91>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	88 23       	and	r24, r24
     992:	21 f0       	breq	.+8      	; 0x99c <__stack+0x9d>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	03 c0       	rjmp	.+6      	; 0x99e <__stack+0x9f>
int i;
	therm_reset();
	therm_write_byte(THERM_CMD_READROM);
	
	for (i=0;i<serial_l;i++) ROM[i]=therm_read_byte();
	if (ROM[0]!=0x28)	return -1; //error indien device niet matched
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x9f>
  if (( crc==ROM[7] ) & ((ROM[1]|ROM[2]|ROM[3]|ROM[4]|ROM[5]|ROM[6])!=0)) return 1;
  										
  					  


return -1;
     99c:	8f ef       	ldi	r24, 0xFF	; 255
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <_Z11CompareTimeP5TIMER>:
u16 systemtimer;
timers_p HeartBeat,WDT_timer,Req_timer;
extern UCHAR ROM[];

u8	CompareTime(struct TIMER *timer)
{
     9a8:	fc 01       	movw	r30, r24
	if (timer->flag==0) return 1;
     9aa:	84 81       	ldd	r24, Z+4	; 0x04
     9ac:	88 23       	and	r24, r24
     9ae:	d1 f0       	breq	.+52     	; 0x9e4 <_Z11CompareTimeP5TIMER+0x3c>
	if (timer->countdown==0) {timer->flag=0;return 1;} //safety
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	93 81       	ldd	r25, Z+3	; 0x03
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	19 f4       	brne	.+6      	; 0x9be <_Z11CompareTimeP5TIMER+0x16>
     9b8:	14 82       	std	Z+4, r1	; 0x04
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	08 95       	ret
	if (timer->scounter!=systemtimer) {timer->countdown--;timer->scounter=systemtimer;}
     9be:	20 91 74 02 	lds	r18, 0x0274
     9c2:	30 91 75 02 	lds	r19, 0x0275
     9c6:	40 81       	ld	r20, Z
     9c8:	51 81       	ldd	r21, Z+1	; 0x01
     9ca:	42 17       	cp	r20, r18
     9cc:	53 07       	cpc	r21, r19
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <_Z11CompareTimeP5TIMER+0x40>
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	93 83       	std	Z+3, r25	; 0x03
     9d4:	82 83       	std	Z+2, r24	; 0x02
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	20 83       	st	Z, r18
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
     9da:	89 2b       	or	r24, r25
     9dc:	39 f4       	brne	.+14     	; 0x9ec <_Z11CompareTimeP5TIMER+0x44>
     9de:	14 82       	std	Z+4, r1	; 0x04
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	08 95       	ret
timers_p HeartBeat,WDT_timer,Req_timer;
extern UCHAR ROM[];

u8	CompareTime(struct TIMER *timer)
{
	if (timer->flag==0) return 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	08 95       	ret
	if (timer->countdown==0) {timer->flag=0;return 1;} //safety
	if (timer->scounter!=systemtimer) {timer->countdown--;timer->scounter=systemtimer;}
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
     9ec:	80 e0       	ldi	r24, 0x00	; 0
}
     9ee:	08 95       	ret

000009f0 <_Z9SwitchLedv>:
usart_pstr("CanId accepted\r\n");
}

void SwitchLed(void)
{
if (IS_SET(LED)) RESET(LED); else SET(LED);	
     9f0:	4f 9b       	sbis	0x09, 7	; 9
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <_Z9SwitchLedv+0x8>
     9f4:	5f 98       	cbi	0x0b, 7	; 11
     9f6:	08 95       	ret
     9f8:	5f 9a       	sbi	0x0b, 7	; 11
     9fa:	08 95       	ret

000009fc <_Z7SendPDOj>:
if (!IS_SET(A1) & IS_SET(REL)) RESET(REL);
usart_pstr("Anoloog input");
SendPDO(PDO1);
}
void SendPDO(u16 service)
{
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
	u8 a=0;
	SwitchLed();
     a02:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z9SwitchLedv>
	//service= NMT_GUARD;

	if (IS_SET(RELSTAT)) a=1;
     a06:	29 b1       	in	r18, 0x09	; 9
	message.id = Can1.id | service;
     a08:	80 91 e9 01 	lds	r24, 0x01E9
     a0c:	c8 2b       	or	r28, r24
     a0e:	d0 93 27 02 	sts	0x0227, r29
     a12:	c0 93 26 02 	sts	0x0226, r28
	message.header.rtr = 0;
     a16:	e8 e2       	ldi	r30, 0x28	; 40
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	80 81       	ld	r24, Z
	message.header.length = 6;
     a1c:	80 7e       	andi	r24, 0xE0	; 224
     a1e:	8c 60       	ori	r24, 0x0C	; 12
     a20:	80 83       	st	Z, r24
	message.data[0] = PORTC>>1;
     a22:	88 b1       	in	r24, 0x08	; 8
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	95 95       	asr	r25
     a28:	87 95       	ror	r24
     a2a:	80 93 29 02 	sts	0x0229, r24
{
	u8 a=0;
	SwitchLed();
	//service= NMT_GUARD;

	if (IS_SET(RELSTAT)) a=1;
     a2e:	24 fb       	bst	r18, 4
     a30:	88 27       	eor	r24, r24
     a32:	80 f9       	bld	r24, 0
	message.id = Can1.id | service;
	message.header.rtr = 0;
	message.header.length = 6;
	message.data[0] = PORTC>>1;
	message.data[1] = a;
     a34:	80 93 2a 02 	sts	0x022A, r24
	for (a=0;a<4;a++) message.data[2+a]=ROM[1+a];
     a38:	80 91 32 02 	lds	r24, 0x0232
     a3c:	80 93 2b 02 	sts	0x022B, r24
     a40:	80 91 33 02 	lds	r24, 0x0233
     a44:	80 93 2c 02 	sts	0x022C, r24
     a48:	80 91 34 02 	lds	r24, 0x0234
     a4c:	80 93 2d 02 	sts	0x022D, r24
     a50:	80 91 35 02 	lds	r24, 0x0235
     a54:	80 93 2e 02 	sts	0x022E, r24

	mcp2515_send_message(&message);	
     a58:	86 e2       	ldi	r24, 0x26	; 38
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 a9 03 	call	0x752	; 0x752 <_Z20mcp2515_send_messageP4tCAN>
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <_Z5Blinkc>:
}

void Blink(char nr)
{
	char i;
	for (i=0;i<nr;i++) {SET(LED);
     a66:	88 23       	and	r24, r24
     a68:	c1 f0       	breq	.+48     	; 0xa9a <_Z5Blinkc+0x34>
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	31 ee       	ldi	r19, 0xE1	; 225
     a72:	44 e0       	ldi	r20, 0x04	; 4
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	30 40       	sbci	r19, 0x00	; 0
     a78:	40 40       	sbci	r20, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <_Z5Blinkc+0xe>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <_Z5Blinkc+0x18>
     a7e:	00 00       	nop
		_delay_ms(100);
		RESET(LED);
     a80:	5f 98       	cbi	0x0b, 7	; 11
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	31 ee       	ldi	r19, 0xE1	; 225
     a86:	44 e0       	ldi	r20, 0x04	; 4
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	30 40       	sbci	r19, 0x00	; 0
     a8c:	40 40       	sbci	r20, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <_Z5Blinkc+0x22>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <_Z5Blinkc+0x2c>
     a92:	00 00       	nop
}

void Blink(char nr)
{
	char i;
	for (i=0;i<nr;i++) {SET(LED);
     a94:	9f 5f       	subi	r25, 0xFF	; 255
     a96:	98 13       	cpse	r25, r24
     a98:	e9 cf       	rjmp	.-46     	; 0xa6c <_Z5Blinkc+0x6>
     a9a:	08 95       	ret

00000a9c <_Z9InitTimerv>:
	_delay_ms(100);}
}

void	InitTimer(void)
{
	TCCR1A=0;
     a9c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS02) | (1<<CS00);
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=(1<<TOIE0);
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	20 93 6f 00 	sts	0x006F, r18
	TCNT1=TIMEROVERFLOW;
     aac:	85 ee       	ldi	r24, 0xE5	; 229
     aae:	99 ef       	ldi	r25, 0xF9	; 249
     ab0:	90 93 85 00 	sts	0x0085, r25
     ab4:	80 93 84 00 	sts	0x0084, r24
	systemtimer=0;
     ab8:	10 92 75 02 	sts	0x0275, r1
     abc:	10 92 74 02 	sts	0x0274, r1
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
     ac0:	20 93 73 02 	sts	0x0273, r18
	timer->countdown=counts;
     ac4:	80 e7       	ldi	r24, 0x70	; 112
     ac6:	97 e1       	ldi	r25, 0x17	; 23
     ac8:	90 93 72 02 	sts	0x0272, r25
     acc:	80 93 71 02 	sts	0x0271, r24
	timer->scounter=systemtimer;
     ad0:	10 92 70 02 	sts	0x0270, r1
     ad4:	10 92 6f 02 	sts	0x026F, r1
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
     ad8:	20 93 6e 02 	sts	0x026E, r18
	timer->countdown=counts;
     adc:	8c e3       	ldi	r24, 0x3C	; 60
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	90 93 6d 02 	sts	0x026D, r25
     ae4:	80 93 6c 02 	sts	0x026C, r24
	timer->scounter=systemtimer;
     ae8:	10 92 6b 02 	sts	0x026B, r1
     aec:	10 92 6a 02 	sts	0x026A, r1
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
     af0:	20 93 69 02 	sts	0x0269, r18
	timer->countdown=counts;
     af4:	8e e1       	ldi	r24, 0x1E	; 30
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 68 02 	sts	0x0268, r25
     afc:	80 93 67 02 	sts	0x0267, r24
	timer->scounter=systemtimer;
     b00:	10 92 66 02 	sts	0x0266, r1
     b04:	10 92 65 02 	sts	0x0265, r1
     b08:	08 95       	ret

00000b0a <_Z15EnableInterruptc>:
}

///////////////////////////////////////
void EnableInterrupt(char nr)
{
	if (nr==0) EIMSK|=1<<INT0; 	else EIMSK|=1<<INT1;
     b0a:	81 11       	cpse	r24, r1
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <_Z15EnableInterruptc+0x8>
     b0e:	e8 9a       	sbi	0x1d, 0	; 29
     b10:	08 95       	ret
     b12:	e9 9a       	sbi	0x1d, 1	; 29
     b14:	08 95       	ret

00000b16 <_Z10USART_Initj>:
void USART_Init(unsigned int ubrr)
{
	/*
	Set baud rate
	*/
	UBRR0H = (unsigned char)(ubrr>>8);
     b16:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char	)ubrr;
     b1a:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	80 93 c1 00 	sts	0x00C1, r24
	/*
	Set frame format: 8data, 2stop bit
	*/
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     b24:	8e e0       	ldi	r24, 0x0E	; 14
     b26:	80 93 c2 00 	sts	0x00C2, r24
     b2a:	08 95       	ret

00000b2c <_Z13usart_putcharc>:
}

void usart_putchar(char data) {
	// Wait for empty transmit buffer
	while ( !(UCSR0A & (1<<UDRE0)) );
     b2c:	e0 ec       	ldi	r30, 0xC0	; 192
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	90 81       	ld	r25, Z
     b32:	95 ff       	sbrs	r25, 5
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <_Z13usart_putcharc+0x4>
	// Start transmission
	UDR0 = data;
     b36:	80 93 c6 00 	sts	0x00C6, r24
     b3a:	08 95       	ret

00000b3c <_Z10usart_pstrPKc>:
}

void usart_pstr(char const *s)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
	
	// loop through entire string
	while (*s) {
     b42:	88 81       	ld	r24, Y
     b44:	88 23       	and	r24, r24
     b46:	31 f0       	breq	.+12     	; 0xb54 <_Z10usart_pstrPKc+0x18>
     b48:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
     b4a:	0e 94 96 05 	call	0xb2c	; 0xb2c <_Z13usart_putcharc>

void usart_pstr(char const *s)
{
	
	// loop through entire string
	while (*s) {
     b4e:	89 91       	ld	r24, Y+
     b50:	81 11       	cpse	r24, r1
     b52:	fb cf       	rjmp	.-10     	; 0xb4a <_Z10usart_pstrPKc+0xe>
		usart_putchar(*s);
		s++;
	}

}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <_Z15ControleerCanIdv>:
	timer->scounter=systemtimer;
}
void ControleerCanId(void)
{
u8 i;
if (Can1.state!=ST_PREOPERATIONAL) return;
     b5a:	80 91 e8 01 	lds	r24, 0x01E8
     b5e:	81 31       	cpi	r24, 0x11	; 17
     b60:	81 f5       	brne	.+96     	; 0xbc2 <_Z15ControleerCanIdv+0x68>
for (i=0;i<4;i++) if (message.data[1+i]!=ROM[1+i]) {usart_pstr("Serial not ok");return;}
     b62:	90 91 2a 02 	lds	r25, 0x022A
     b66:	80 91 32 02 	lds	r24, 0x0232
     b6a:	98 13       	cpse	r25, r24
     b6c:	12 c0       	rjmp	.+36     	; 0xb92 <_Z15ControleerCanIdv+0x38>
     b6e:	90 91 2b 02 	lds	r25, 0x022B
     b72:	80 91 33 02 	lds	r24, 0x0233
     b76:	98 13       	cpse	r25, r24
     b78:	0c c0       	rjmp	.+24     	; 0xb92 <_Z15ControleerCanIdv+0x38>
     b7a:	90 91 2c 02 	lds	r25, 0x022C
     b7e:	80 91 34 02 	lds	r24, 0x0234
     b82:	98 13       	cpse	r25, r24
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <_Z15ControleerCanIdv+0x38>
     b86:	90 91 2d 02 	lds	r25, 0x022D
     b8a:	80 91 35 02 	lds	r24, 0x0235
     b8e:	98 17       	cp	r25, r24
     b90:	29 f0       	breq	.+10     	; 0xb9c <_Z15ControleerCanIdv+0x42>
     b92:	8c e6       	ldi	r24, 0x6C	; 108
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
     b9a:	08 95       	ret
Can1.id=message.id & 0x7f;
     b9c:	80 91 26 02 	lds	r24, 0x0226
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	80 93 e9 01 	sts	0x01E9, r24
if (message.data[0] & 1) SET(REL); else RESET(REL);
     ba6:	80 91 29 02 	lds	r24, 0x0229
     baa:	80 ff       	sbrs	r24, 0
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <_Z15ControleerCanIdv+0x58>
     bae:	5c 9a       	sbi	0x0b, 4	; 11
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <_Z15ControleerCanIdv+0x5a>
     bb2:	5c 98       	cbi	0x0b, 4	; 11
Can1.state=Operational;
     bb4:	85 e0       	ldi	r24, 0x05	; 5
     bb6:	80 93 e8 01 	sts	0x01E8, r24
usart_pstr("CanId accepted\r\n");
     bba:	8a e7       	ldi	r24, 0x7A	; 122
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
     bc2:	08 95       	ret

00000bc4 <_Z16DecodeNMTMessagev>:
void SwitchLed(void)
{
if (IS_SET(LED)) RESET(LED); else SET(LED);	
}
void DecodeNMTMessage(void)
{
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
u8 i;
	sprintf(buf,"%d-%d\r\n",message.id,Can1.id);
     bd4:	80 91 e9 01 	lds	r24, 0x01E9
     bd8:	1f 92       	push	r1
     bda:	8f 93       	push	r24
     bdc:	c6 e2       	ldi	r28, 0x26	; 38
     bde:	d2 e0       	ldi	r29, 0x02	; 2
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	8f 93       	push	r24
     be4:	88 81       	ld	r24, Y
     be6:	8f 93       	push	r24
     be8:	8b e8       	ldi	r24, 0x8B	; 139
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	8a ee       	ldi	r24, 0xEA	; 234
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <sprintf>
	usart_pstr(buf);
     bfc:	8a ee       	ldi	r24, 0xEA	; 234
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
	switch (message.id & 0x780)
     c04:	8d b7       	in	r24, 0x3d	; 61
     c06:	9e b7       	in	r25, 0x3e	; 62
     c08:	08 96       	adiw	r24, 0x08	; 8
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	9e bf       	out	0x3e, r25	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	8d bf       	out	0x3d, r24	; 61
     c14:	88 81       	ld	r24, Y
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	80 78       	andi	r24, 0x80	; 128
     c1a:	97 70       	andi	r25, 0x07	; 7
     c1c:	81 15       	cp	r24, r1
     c1e:	95 40       	sbci	r25, 0x05	; 5
     c20:	21 f4       	brne	.+8      	; 0xc2a <_Z16DecodeNMTMessagev+0x66>
	{
		case PDOR4: {SwitchLed();ControleerCanId();break;}	
     c22:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z9SwitchLedv>
     c26:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_Z15ControleerCanIdv>
	}
	
	if ((message.id & 0x7f)==Can1.id ) {
     c2a:	80 91 26 02 	lds	r24, 0x0226
     c2e:	90 91 27 02 	lds	r25, 0x0227
     c32:	60 91 e9 01 	lds	r22, 0x01E9
     c36:	ac 01       	movw	r20, r24
     c38:	4f 77       	andi	r20, 0x7F	; 127
     c3a:	55 27       	eor	r21, r21
     c3c:	26 2f       	mov	r18, r22
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	42 17       	cp	r20, r18
     c42:	53 07       	cpc	r21, r19
     c44:	09 f0       	breq	.+2      	; 0xc48 <_Z16DecodeNMTMessagev+0x84>
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <_Z16DecodeNMTMessagev+0x102>
		SwitchLed();
     c48:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z9SwitchLedv>
		
		switch (message.id & 0x780)
     c4c:	80 91 26 02 	lds	r24, 0x0226
     c50:	90 91 27 02 	lds	r25, 0x0227
     c54:	80 78       	andi	r24, 0x80	; 128
     c56:	97 70       	andi	r25, 0x07	; 7
     c58:	81 15       	cp	r24, r1
     c5a:	92 40       	sbci	r25, 0x02	; 2
     c5c:	09 f0       	breq	.+2      	; 0xc60 <_Z16DecodeNMTMessagev+0x9c>
     c5e:	6a c0       	rjmp	.+212    	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
     c60:	09 e2       	ldi	r16, 0x29	; 41
     c62:	12 e0       	ldi	r17, 0x02	; 2
     c64:	0f 2e       	mov	r0, r31
     c66:	f1 e3       	ldi	r31, 0x31	; 49
     c68:	cf 2e       	mov	r12, r31
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	df 2e       	mov	r13, r31
     c6e:	f0 2d       	mov	r31, r0
		{
			case PDOR1: {
				for (i=0;i<8;i++) {sprintf(buf,"%d ",message.data[i]);usart_pstr(buf);}
     c70:	0f 2e       	mov	r0, r31
     c72:	f3 e9       	ldi	r31, 0x93	; 147
     c74:	ef 2e       	mov	r14, r31
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	ff 2e       	mov	r15, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	ca ee       	ldi	r28, 0xEA	; 234
     c7e:	d1 e0       	ldi	r29, 0x01	; 1
     c80:	f8 01       	movw	r30, r16
     c82:	81 91       	ld	r24, Z+
     c84:	8f 01       	movw	r16, r30
     c86:	1f 92       	push	r1
     c88:	8f 93       	push	r24
     c8a:	ff 92       	push	r15
     c8c:	ef 92       	push	r14
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0e 94 53 08 	call	0x10a6	; 0x10a6 <sprintf>
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0c 15       	cp	r16, r12
     caa:	1d 05       	cpc	r17, r13
     cac:	49 f7       	brne	.-46     	; 0xc80 <_Z16DecodeNMTMessagev+0xbc>
				usart_pstr("data\r\n");
     cae:	87 e9       	ldi	r24, 0x97	; 151
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
				if (message.data[0] & 1) SET(REL); else RESET(REL);
     cb6:	80 91 29 02 	lds	r24, 0x0229
     cba:	80 ff       	sbrs	r24, 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <_Z16DecodeNMTMessagev+0xfe>
     cbe:	5c 9a       	sbi	0x0b, 4	; 11
     cc0:	39 c0       	rjmp	.+114    	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
     cc2:	5c 98       	cbi	0x0b, 4	; 11
     cc4:	37 c0       	rjmp	.+110    	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
			}
			case PDOR2: break;
			case PDOR3: break;
			case SDOR: break;
		}
	} else  if  ((message.id==0)	&  ((message.data[1]==Can1.id) | (message.data[1]==0) ))
     cc6:	40 91 2a 02 	lds	r20, 0x022A
     cca:	31 e0       	ldi	r19, 0x01	; 1
     ccc:	41 11       	cpse	r20, r1
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	64 13       	cpse	r22, r20
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	23 2b       	or	r18, r19
     cd8:	69 f1       	breq	.+90     	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	89 2b       	or	r24, r25
     cde:	09 f0       	breq	.+2      	; 0xce2 <_Z16DecodeNMTMessagev+0x11e>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	22 23       	and	r18, r18
     ce4:	39 f1       	breq	.+78     	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
	{
		SwitchLed();
     ce6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z9SwitchLedv>
		usart_pstr("NMTcontrol1");
     cea:	8e e9       	ldi	r24, 0x9E	; 158
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
		switch (message.data[0])
     cf2:	80 91 29 02 	lds	r24, 0x0229
     cf6:	80 38       	cpi	r24, 0x80	; 128
     cf8:	e9 f0       	breq	.+58     	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
     cfa:	20 f4       	brcc	.+8      	; 0xd04 <_Z16DecodeNMTMessagev+0x140>
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	a8 f4       	brcc	.+42     	; 0xd2c <_Z16DecodeNMTMessagev+0x168>
     d02:	18 c0       	rjmp	.+48     	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
     d04:	81 38       	cpi	r24, 0x81	; 129
     d06:	19 f0       	breq	.+6      	; 0xd0e <_Z16DecodeNMTMessagev+0x14a>
     d08:	82 38       	cpi	r24, 0x82	; 130
     d0a:	69 f0       	breq	.+26     	; 0xd26 <_Z16DecodeNMTMessagev+0x162>
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <_Z16DecodeNMTMessagev+0x168>
			case Stop_Remote_Node: break;
			case Enter_Preperational_State: break;
			case Reset_Node:{
							do                          \
							{                           \
								wdt_enable(WDTO_15MS);  \
     d0e:	28 e0       	ldi	r18, 0x08	; 8
     d10:	88 e1       	ldi	r24, 0x18	; 24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	a8 95       	wdr
     d1a:	80 93 60 00 	sts	0x0060, r24
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	20 93 60 00 	sts	0x0060, r18
     d24:	ff cf       	rjmp	.-2      	; 0xd24 <_Z16DecodeNMTMessagev+0x160>
								for(;;)                 \
								{                       \
								}                       \
							} while(0);
							break;}
			case ResetCommunication:mcp2515_init();break;
     d26:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_Z12mcp2515_initv>
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <_Z16DecodeNMTMessagev+0x170>
			default: usart_pstr("Error CS\r\n");break;
     d2c:	8a ea       	ldi	r24, 0xAA	; 170
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
		}
	}

}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <_Z12ErrorServiceh>:
// Hauptprogram
void ErrorService (u8 flag)
{
     d46:	cf 93       	push	r28
     d48:	c8 2f       	mov	r28, r24
mcp2515_bit_modify(CANINTF, (1<<MERRF), 0);	
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	60 e8       	ldi	r22, 0x80	; 128
     d4e:	8c e2       	ldi	r24, 0x2C	; 44
     d50:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
mcp2515_bit_modify(CANINTF, (1<<ERRIF), 0);	
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	60 e2       	ldi	r22, 0x20	; 32
     d58:	8c e2       	ldi	r24, 0x2C	; 44
     d5a:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
	message.id = Can1.id | SDO;
     d5e:	20 91 e9 01 	lds	r18, 0x01E9
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	20 68       	ori	r18, 0x80	; 128
     d66:	35 60       	ori	r19, 0x05	; 5
     d68:	30 93 27 02 	sts	0x0227, r19
     d6c:	20 93 26 02 	sts	0x0226, r18
	message.header.rtr = 0;
     d70:	e8 e2       	ldi	r30, 0x28	; 40
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	80 81       	ld	r24, Z
	message.header.length = 2;
     d76:	80 7e       	andi	r24, 0xE0	; 224
     d78:	84 60       	ori	r24, 0x04	; 4
     d7a:	80 83       	st	Z, r24
	message.data[0] = flag;
     d7c:	c0 93 29 02 	sts	0x0229, r28
	message.data[1]=mcp2515_read_register(EFLG);
     d80:	8d e2       	ldi	r24, 0x2D	; 45
     d82:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     d86:	80 93 2a 02 	sts	0x022A, r24
	mcp2515_send_message(&message);
     d8a:	86 e2       	ldi	r24, 0x26	; 38
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	0e 94 a9 03 	call	0x752	; 0x752 <_Z20mcp2515_send_messageP4tCAN>
	mcp2515_bit_modify(CANINTF, (1<<MERRF), 0);
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	60 e8       	ldi	r22, 0x80	; 128
     d96:	8c e2       	ldi	r24, 0x2C	; 44
     d98:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
	mcp2515_bit_modify(CANINTF, (1<<ERRIF), 0);
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	60 e2       	ldi	r22, 0x20	; 32
     da0:	8c e2       	ldi	r24, 0x2C	; 44
     da2:	0e 94 44 02 	call	0x488	; 0x488 <_Z18mcp2515_bit_modifyhhh>
	usart_pstr("ErrorCondition found");
     da6:	85 eb       	ldi	r24, 0xB5	; 181
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
	mcp2515_init();
     dae:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_Z12mcp2515_initv>
     db2:	2f e7       	ldi	r18, 0x7F	; 127
     db4:	83 e7       	ldi	r24, 0x73	; 115
     db6:	9c e0       	ldi	r25, 0x0C	; 12
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <_Z12ErrorServiceh+0x72>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <_Z12ErrorServiceh+0x7c>
     dc2:	00 00       	nop
	_delay_ms(255);
	}
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <__vector_1>:



ISR(INT0_vect)
{
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	cf 93       	push	r28
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31

	u8 flags;

	flags=mcp2515_read_register(CANINTF);
     dec:	8c e2       	ldi	r24, 0x2C	; 44
     dee:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     df2:	c8 2f       	mov	r28, r24
	if (flags & (1<<MERRF)) {ErrorService(1);}
     df4:	88 23       	and	r24, r24
     df6:	1c f4       	brge	.+6      	; 0xdfe <__vector_1+0x36>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <_Z12ErrorServiceh>
	if (flags & (1<<ERRIF)) {ErrorService(2);}
     dfe:	c5 ff       	sbrs	r28, 5
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <__vector_1+0x40>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 a3 06 	call	0xd46	; 0xd46 <_Z12ErrorServiceh>
	if (mcp2515_check_message()) {
     e08:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z21mcp2515_check_messagev>
     e0c:	88 23       	and	r24, r24
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__vector_1+0x56>
		
		// Lese die Nachricht aus dem Puffern des MCP2515
		if (mcp2515_get_message(&message)) DecodeNMTMessage();
     e10:	86 e2       	ldi	r24, 0x26	; 38
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	0e 94 26 03 	call	0x64c	; 0x64c <_Z19mcp2515_get_messageP4tCAN>
     e18:	81 11       	cpse	r24, r1
     e1a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z16DecodeNMTMessagev>
		
	}
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	cf 91       	pop	r28
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_4>:
ISR(PCINT1_vect) {    // Interrupt service routine. Every single PCINT8..14 (=ADC0..5) change
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
	// will generate an interrupt: but this will always be the same interrupt routine

if (IS_SET(A1) & !IS_SET(REL)) SET(REL);
     e64:	86 b1       	in	r24, 0x06	; 6
     e66:	4c 99       	sbic	0x09, 4	; 9
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <__vector_4+0x2c>
     e6a:	81 fd       	sbrc	r24, 1
     e6c:	5c 9a       	sbi	0x0b, 4	; 11
if (!IS_SET(A1) & IS_SET(REL)) RESET(REL);
     e6e:	86 b1       	in	r24, 0x06	; 6
     e70:	4c 9b       	sbis	0x09, 4	; 9
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <__vector_4+0x36>
     e74:	81 ff       	sbrs	r24, 1
     e76:	5c 98       	cbi	0x0b, 4	; 11
usart_pstr("Anoloog input");
     e78:	8a ec       	ldi	r24, 0xCA	; 202
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
SendPDO(PDO1);
     e80:	80 e8       	ldi	r24, 0x80	; 128
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_Z7SendPDOj>
}
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <_Z6ReadADv>:
}

u16 ReadAD(void)
{
	u16	res;
	ADMUX = (1<<REFS0); //(1<<MUX0) | (1<<MUX2) | (1<<MUX1) ;// MUX set to ADC3. VCC as ref. Right justified
     eaa:	80 e4       	ldi	r24, 0x40	; 64
     eac:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS2); // turn ADC on and initialise. no auto-trigger, no interrupt. prescaler to div2
     eb0:	84 e8       	ldi	r24, 0x84	; 132
     eb2:	80 93 7a 00 	sts	0x007A, r24
	DIDR0=(1<<ADC0D);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 7e 00 	sts	0x007E, r24
     ebc:	8f e3       	ldi	r24, 0x3F	; 63
     ebe:	9c e9       	ldi	r25, 0x9C	; 156
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <_Z6ReadADv+0x16>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <_Z6ReadADv+0x1c>
     ec6:	00 00       	nop
	_delay_ms(10);
	//start a conversion
	ADCSRA |= (1<<ADSC);	
     ec8:	ea e7       	ldi	r30, 0x7A	; 122
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)) {};
     ed2:	80 81       	ld	r24, Z
     ed4:	86 fd       	sbrc	r24, 6
     ed6:	fd cf       	rjmp	.-6      	; 0xed2 <_Z6ReadADv+0x28>
	res=ADC;
     ed8:	80 91 78 00 	lds	r24, 0x0078
     edc:	90 91 79 00 	lds	r25, 0x0079
	ADCSRA=0;
     ee0:	10 92 7a 00 	sts	0x007A, r1
	return (res & 0x3ff);
}
     ee4:	93 70       	andi	r25, 0x03	; 3
     ee6:	08 95       	ret

00000ee8 <_Z13SendHeartBeath>:
	for (a=0;a<4;a++) message.data[2+a]=ROM[1+a];

	mcp2515_send_message(&message);	
}
void SendHeartBeat(u8 state)
{
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	d8 2f       	mov	r29, r24
	if (Can1.state==ST_PREOPERATIONAL) return;
     ef2:	90 91 e8 01 	lds	r25, 0x01E8
     ef6:	91 31       	cpi	r25, 0x11	; 17
     ef8:	09 f4       	brne	.+2      	; 0xefc <_Z13SendHeartBeath+0x14>
     efa:	43 c0       	rjmp	.+134    	; 0xf82 <_Z13SendHeartBeath+0x9a>

	u8 a=0;
	u16 res=ReadAD();
     efc:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z6ReadADv>
     f00:	08 2f       	mov	r16, r24
     f02:	19 2f       	mov	r17, r25
	SwitchLed();
     f04:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z9SwitchLedv>

	if (IS_SET(RELSTAT)) a=1;
     f08:	c9 b1       	in	r28, 0x09	; 9
     f0a:	c2 95       	swap	r28
     f0c:	c1 70       	andi	r28, 0x01	; 1
		sprintf(buf,"SendToMbed:%d\r\n",a);
     f0e:	1f 92       	push	r1
     f10:	cf 93       	push	r28
     f12:	28 ed       	ldi	r18, 0xD8	; 216
     f14:	31 e0       	ldi	r19, 0x01	; 1
     f16:	3f 93       	push	r19
     f18:	2f 93       	push	r18
     f1a:	2a ee       	ldi	r18, 0xEA	; 234
     f1c:	31 e0       	ldi	r19, 0x01	; 1
     f1e:	3f 93       	push	r19
     f20:	2f 93       	push	r18
     f22:	0e 94 53 08 	call	0x10a6	; 0x10a6 <sprintf>
		usart_pstr(buf);
     f26:	8a ee       	ldi	r24, 0xEA	; 234
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
	message.id = Can1.id | NMT_GUARD;
     f2e:	20 91 e9 01 	lds	r18, 0x01E9
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	37 60       	ori	r19, 0x07	; 7
     f36:	30 93 27 02 	sts	0x0227, r19
     f3a:	20 93 26 02 	sts	0x0226, r18
	message.header.rtr = 0;
     f3e:	e8 e2       	ldi	r30, 0x28	; 40
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	80 81       	ld	r24, Z
	message.header.length = 6;
     f44:	80 7e       	andi	r24, 0xE0	; 224
     f46:	8c 60       	ori	r24, 0x0C	; 12
     f48:	80 83       	st	Z, r24
	message.data[0] = state;
     f4a:	d0 93 29 02 	sts	0x0229, r29
	message.data[1] = a;
     f4e:	c0 93 2a 02 	sts	0x022A, r28
	message.data[2]=res & 0xff;
     f52:	00 93 2b 02 	sts	0x022B, r16
	message.data[3]=res>>8;
     f56:	10 93 2c 02 	sts	0x022C, r17
	message.data[4]=mcp2515_read_register(TEC);	
     f5a:	8c e1       	ldi	r24, 0x1C	; 28
     f5c:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     f60:	80 93 2d 02 	sts	0x022D, r24
	message.data[5]=mcp2515_read_register(REC);	
     f64:	8d e1       	ldi	r24, 0x1D	; 29
     f66:	0e 94 35 02 	call	0x46a	; 0x46a <_Z21mcp2515_read_registerh>
     f6a:	80 93 2e 02 	sts	0x022E, r24
	mcp2515_send_message(&message);
     f6e:	86 e2       	ldi	r24, 0x26	; 38
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 a9 03 	call	0x752	; 0x752 <_Z20mcp2515_send_messageP4tCAN>
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	08 95       	ret

00000f8c <__vector_13>:
	StartTimer(&Req_timer,30);
}


ISR(TIMER1_OVF_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
	TCNT1=TIMEROVERFLOW;
     fae:	85 ee       	ldi	r24, 0xE5	; 229
     fb0:	99 ef       	ldi	r25, 0xF9	; 249
     fb2:	90 93 85 00 	sts	0x0085, r25
     fb6:	80 93 84 00 	sts	0x0084, r24
	systemtimer++;
     fba:	80 91 74 02 	lds	r24, 0x0274
     fbe:	90 91 75 02 	lds	r25, 0x0275
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 75 02 	sts	0x0275, r25
     fc8:	80 93 74 02 	sts	0x0274, r24
	//usart_pstr("TEST");
	if (CompareTime(&HeartBeat)>0) {StartTimer(&HeartBeat,6000);SendHeartBeat(Can1.state);}
     fcc:	8f e6       	ldi	r24, 0x6F	; 111
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11CompareTimeP5TIMER>
     fd4:	88 23       	and	r24, r24
     fd6:	a9 f0       	breq	.+42     	; 0x1002 <__vector_13+0x76>
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 73 02 	sts	0x0273, r24
	timer->countdown=counts;
     fde:	80 e7       	ldi	r24, 0x70	; 112
     fe0:	97 e1       	ldi	r25, 0x17	; 23
     fe2:	90 93 72 02 	sts	0x0272, r25
     fe6:	80 93 71 02 	sts	0x0271, r24
	timer->scounter=systemtimer;
     fea:	80 91 74 02 	lds	r24, 0x0274
     fee:	90 91 75 02 	lds	r25, 0x0275
     ff2:	90 93 70 02 	sts	0x0270, r25
     ff6:	80 93 6f 02 	sts	0x026F, r24
ISR(TIMER1_OVF_vect)
{
	TCNT1=TIMEROVERFLOW;
	systemtimer++;
	//usart_pstr("TEST");
	if (CompareTime(&HeartBeat)>0) {StartTimer(&HeartBeat,6000);SendHeartBeat(Can1.state);}
     ffa:	80 91 e8 01 	lds	r24, 0x01E8
     ffe:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z13SendHeartBeath>
	if (CompareTime(&WDT_timer)>0) {StartTimer(&WDT_timer,60);wdt_reset();}
    1002:	8a e6       	ldi	r24, 0x6A	; 106
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11CompareTimeP5TIMER>
    100a:	88 23       	and	r24, r24
    100c:	91 f0       	breq	.+36     	; 0x1032 <__vector_13+0xa6>
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 6e 02 	sts	0x026E, r24
	timer->countdown=counts;
    1014:	8c e3       	ldi	r24, 0x3C	; 60
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 93 6d 02 	sts	0x026D, r25
    101c:	80 93 6c 02 	sts	0x026C, r24
	timer->scounter=systemtimer;
    1020:	80 91 74 02 	lds	r24, 0x0274
    1024:	90 91 75 02 	lds	r25, 0x0275
    1028:	90 93 6b 02 	sts	0x026B, r25
    102c:	80 93 6a 02 	sts	0x026A, r24
{
	TCNT1=TIMEROVERFLOW;
	systemtimer++;
	//usart_pstr("TEST");
	if (CompareTime(&HeartBeat)>0) {StartTimer(&HeartBeat,6000);SendHeartBeat(Can1.state);}
	if (CompareTime(&WDT_timer)>0) {StartTimer(&WDT_timer,60);wdt_reset();}
    1030:	a8 95       	wdr
	if (CompareTime(&Req_timer)>0) {if (Can1.state==ST_PREOPERATIONAL) {SendPDO(PDO4);StartTimer(&Req_timer,30);usart_pstr("Can Request CanID\r\n");}}
    1032:	85 e6       	ldi	r24, 0x65	; 101
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11CompareTimeP5TIMER>
    103a:	88 23       	and	r24, r24
    103c:	e9 f0       	breq	.+58     	; 0x1078 <__vector_13+0xec>
    103e:	80 91 e8 01 	lds	r24, 0x01E8
    1042:	81 31       	cpi	r24, 0x11	; 17
    1044:	c9 f4       	brne	.+50     	; 0x1078 <__vector_13+0xec>
    1046:	80 e8       	ldi	r24, 0x80	; 128
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_Z7SendPDOj>
	if (timer->countdown==0) {timer->flag=0;return 1;} else return 0;
}

void	StartTimer(struct TIMER *timer, u16 counts)
{
	timer->flag=1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 69 02 	sts	0x0269, r24
	timer->countdown=counts;
    1054:	8e e1       	ldi	r24, 0x1E	; 30
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 68 02 	sts	0x0268, r25
    105c:	80 93 67 02 	sts	0x0267, r24
	timer->scounter=systemtimer;
    1060:	80 91 74 02 	lds	r24, 0x0274
    1064:	90 91 75 02 	lds	r25, 0x0275
    1068:	90 93 66 02 	sts	0x0266, r25
    106c:	80 93 65 02 	sts	0x0265, r24
	TCNT1=TIMEROVERFLOW;
	systemtimer++;
	//usart_pstr("TEST");
	if (CompareTime(&HeartBeat)>0) {StartTimer(&HeartBeat,6000);SendHeartBeat(Can1.state);}
	if (CompareTime(&WDT_timer)>0) {StartTimer(&WDT_timer,60);wdt_reset();}
	if (CompareTime(&Req_timer)>0) {if (Can1.state==ST_PREOPERATIONAL) {SendPDO(PDO4);StartTimer(&Req_timer,30);usart_pstr("Can Request CanID\r\n");}}
    1070:	80 e5       	ldi	r24, 0x50	; 80
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z10usart_pstrPKc>
	
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__tablejump2__>:
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31

0000109e <__tablejump__>:
    109e:	05 90       	lpm	r0, Z+
    10a0:	f4 91       	lpm	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	09 94       	ijmp

000010a6 <sprintf>:
    10a6:	ae e0       	ldi	r26, 0x0E	; 14
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e9 e5       	ldi	r30, 0x59	; 89
    10ac:	f8 e0       	ldi	r31, 0x08	; 8
    10ae:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__prologue_saves__+0x1c>
    10b2:	0d 89       	ldd	r16, Y+21	; 0x15
    10b4:	1e 89       	ldd	r17, Y+22	; 0x16
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	8c 83       	std	Y+4, r24	; 0x04
    10ba:	1a 83       	std	Y+2, r17	; 0x02
    10bc:	09 83       	std	Y+1, r16	; 0x01
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f e7       	ldi	r25, 0x7F	; 127
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	ae 01       	movw	r20, r28
    10c8:	47 5e       	subi	r20, 0xE7	; 231
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	6f 89       	ldd	r22, Y+23	; 0x17
    10ce:	78 8d       	ldd	r23, Y+24	; 0x18
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 75 08 	call	0x10ea	; 0x10ea <vfprintf>
    10d8:	ef 81       	ldd	r30, Y+7	; 0x07
    10da:	f8 85       	ldd	r31, Y+8	; 0x08
    10dc:	e0 0f       	add	r30, r16
    10de:	f1 1f       	adc	r31, r17
    10e0:	10 82       	st	Z, r1
    10e2:	2e 96       	adiw	r28, 0x0e	; 14
    10e4:	e4 e0       	ldi	r30, 0x04	; 4
    10e6:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__epilogue_restores__+0x1c>

000010ea <vfprintf>:
    10ea:	ac e0       	ldi	r26, 0x0C	; 12
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e7       	ldi	r30, 0x7B	; 123
    10f0:	f8 e0       	ldi	r31, 0x08	; 8
    10f2:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__prologue_saves__>
    10f6:	7c 01       	movw	r14, r24
    10f8:	6b 01       	movw	r12, r22
    10fa:	8a 01       	movw	r16, r20
    10fc:	fc 01       	movw	r30, r24
    10fe:	17 82       	std	Z+7, r1	; 0x07
    1100:	16 82       	std	Z+6, r1	; 0x06
    1102:	83 81       	ldd	r24, Z+3	; 0x03
    1104:	81 ff       	sbrs	r24, 1
    1106:	bd c1       	rjmp	.+890    	; 0x1482 <vfprintf+0x398>
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	4c 01       	movw	r8, r24
    110e:	f7 01       	movw	r30, r14
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	f6 01       	movw	r30, r12
    1114:	93 fd       	sbrc	r25, 3
    1116:	85 91       	lpm	r24, Z+
    1118:	93 ff       	sbrs	r25, 3
    111a:	81 91       	ld	r24, Z+
    111c:	6f 01       	movw	r12, r30
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <vfprintf+0x3a>
    1122:	ab c1       	rjmp	.+854    	; 0x147a <vfprintf+0x390>
    1124:	85 32       	cpi	r24, 0x25	; 37
    1126:	39 f4       	brne	.+14     	; 0x1136 <vfprintf+0x4c>
    1128:	93 fd       	sbrc	r25, 3
    112a:	85 91       	lpm	r24, Z+
    112c:	93 ff       	sbrs	r25, 3
    112e:	81 91       	ld	r24, Z+
    1130:	6f 01       	movw	r12, r30
    1132:	85 32       	cpi	r24, 0x25	; 37
    1134:	29 f4       	brne	.+10     	; 0x1140 <vfprintf+0x56>
    1136:	b7 01       	movw	r22, r14
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    113e:	e7 cf       	rjmp	.-50     	; 0x110e <vfprintf+0x24>
    1140:	51 2c       	mov	r5, r1
    1142:	31 2c       	mov	r3, r1
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	20 32       	cpi	r18, 0x20	; 32
    1148:	a0 f4       	brcc	.+40     	; 0x1172 <vfprintf+0x88>
    114a:	8b 32       	cpi	r24, 0x2B	; 43
    114c:	69 f0       	breq	.+26     	; 0x1168 <vfprintf+0x7e>
    114e:	30 f4       	brcc	.+12     	; 0x115c <vfprintf+0x72>
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	59 f0       	breq	.+22     	; 0x116a <vfprintf+0x80>
    1154:	83 32       	cpi	r24, 0x23	; 35
    1156:	69 f4       	brne	.+26     	; 0x1172 <vfprintf+0x88>
    1158:	20 61       	ori	r18, 0x10	; 16
    115a:	2c c0       	rjmp	.+88     	; 0x11b4 <vfprintf+0xca>
    115c:	8d 32       	cpi	r24, 0x2D	; 45
    115e:	39 f0       	breq	.+14     	; 0x116e <vfprintf+0x84>
    1160:	80 33       	cpi	r24, 0x30	; 48
    1162:	39 f4       	brne	.+14     	; 0x1172 <vfprintf+0x88>
    1164:	21 60       	ori	r18, 0x01	; 1
    1166:	26 c0       	rjmp	.+76     	; 0x11b4 <vfprintf+0xca>
    1168:	22 60       	ori	r18, 0x02	; 2
    116a:	24 60       	ori	r18, 0x04	; 4
    116c:	23 c0       	rjmp	.+70     	; 0x11b4 <vfprintf+0xca>
    116e:	28 60       	ori	r18, 0x08	; 8
    1170:	21 c0       	rjmp	.+66     	; 0x11b4 <vfprintf+0xca>
    1172:	27 fd       	sbrc	r18, 7
    1174:	27 c0       	rjmp	.+78     	; 0x11c4 <vfprintf+0xda>
    1176:	30 ed       	ldi	r19, 0xD0	; 208
    1178:	38 0f       	add	r19, r24
    117a:	3a 30       	cpi	r19, 0x0A	; 10
    117c:	78 f4       	brcc	.+30     	; 0x119c <vfprintf+0xb2>
    117e:	26 ff       	sbrs	r18, 6
    1180:	06 c0       	rjmp	.+12     	; 0x118e <vfprintf+0xa4>
    1182:	fa e0       	ldi	r31, 0x0A	; 10
    1184:	5f 9e       	mul	r5, r31
    1186:	30 0d       	add	r19, r0
    1188:	11 24       	eor	r1, r1
    118a:	53 2e       	mov	r5, r19
    118c:	13 c0       	rjmp	.+38     	; 0x11b4 <vfprintf+0xca>
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	38 9e       	mul	r3, r24
    1192:	30 0d       	add	r19, r0
    1194:	11 24       	eor	r1, r1
    1196:	33 2e       	mov	r3, r19
    1198:	20 62       	ori	r18, 0x20	; 32
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <vfprintf+0xca>
    119c:	8e 32       	cpi	r24, 0x2E	; 46
    119e:	21 f4       	brne	.+8      	; 0x11a8 <vfprintf+0xbe>
    11a0:	26 fd       	sbrc	r18, 6
    11a2:	6b c1       	rjmp	.+726    	; 0x147a <vfprintf+0x390>
    11a4:	20 64       	ori	r18, 0x40	; 64
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0xca>
    11a8:	8c 36       	cpi	r24, 0x6C	; 108
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <vfprintf+0xc6>
    11ac:	20 68       	ori	r18, 0x80	; 128
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0xca>
    11b0:	88 36       	cpi	r24, 0x68	; 104
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <vfprintf+0xda>
    11b4:	f6 01       	movw	r30, r12
    11b6:	93 fd       	sbrc	r25, 3
    11b8:	85 91       	lpm	r24, Z+
    11ba:	93 ff       	sbrs	r25, 3
    11bc:	81 91       	ld	r24, Z+
    11be:	6f 01       	movw	r12, r30
    11c0:	81 11       	cpse	r24, r1
    11c2:	c1 cf       	rjmp	.-126    	; 0x1146 <vfprintf+0x5c>
    11c4:	98 2f       	mov	r25, r24
    11c6:	9f 7d       	andi	r25, 0xDF	; 223
    11c8:	95 54       	subi	r25, 0x45	; 69
    11ca:	93 30       	cpi	r25, 0x03	; 3
    11cc:	28 f4       	brcc	.+10     	; 0x11d8 <vfprintf+0xee>
    11ce:	0c 5f       	subi	r16, 0xFC	; 252
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	ff e3       	ldi	r31, 0x3F	; 63
    11d4:	f9 83       	std	Y+1, r31	; 0x01
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <vfprintf+0x108>
    11d8:	83 36       	cpi	r24, 0x63	; 99
    11da:	31 f0       	breq	.+12     	; 0x11e8 <vfprintf+0xfe>
    11dc:	83 37       	cpi	r24, 0x73	; 115
    11de:	71 f0       	breq	.+28     	; 0x11fc <vfprintf+0x112>
    11e0:	83 35       	cpi	r24, 0x53	; 83
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <vfprintf+0xfc>
    11e4:	5b c0       	rjmp	.+182    	; 0x129c <vfprintf+0x1b2>
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <vfprintf+0x142>
    11e8:	f8 01       	movw	r30, r16
    11ea:	80 81       	ld	r24, Z
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	0e 5f       	subi	r16, 0xFE	; 254
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	44 24       	eor	r4, r4
    11f4:	43 94       	inc	r4
    11f6:	51 2c       	mov	r5, r1
    11f8:	54 01       	movw	r10, r8
    11fa:	15 c0       	rjmp	.+42     	; 0x1226 <vfprintf+0x13c>
    11fc:	38 01       	movw	r6, r16
    11fe:	f2 e0       	ldi	r31, 0x02	; 2
    1200:	6f 0e       	add	r6, r31
    1202:	71 1c       	adc	r7, r1
    1204:	f8 01       	movw	r30, r16
    1206:	a0 80       	ld	r10, Z
    1208:	b1 80       	ldd	r11, Z+1	; 0x01
    120a:	26 ff       	sbrs	r18, 6
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <vfprintf+0x12a>
    120e:	65 2d       	mov	r22, r5
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x12e>
    1214:	6f ef       	ldi	r22, 0xFF	; 255
    1216:	7f ef       	ldi	r23, 0xFF	; 255
    1218:	c5 01       	movw	r24, r10
    121a:	2c 87       	std	Y+12, r18	; 0x0c
    121c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <strnlen>
    1220:	2c 01       	movw	r4, r24
    1222:	83 01       	movw	r16, r6
    1224:	2c 85       	ldd	r18, Y+12	; 0x0c
    1226:	2f 77       	andi	r18, 0x7F	; 127
    1228:	22 2e       	mov	r2, r18
    122a:	17 c0       	rjmp	.+46     	; 0x125a <vfprintf+0x170>
    122c:	38 01       	movw	r6, r16
    122e:	f2 e0       	ldi	r31, 0x02	; 2
    1230:	6f 0e       	add	r6, r31
    1232:	71 1c       	adc	r7, r1
    1234:	f8 01       	movw	r30, r16
    1236:	a0 80       	ld	r10, Z
    1238:	b1 80       	ldd	r11, Z+1	; 0x01
    123a:	26 ff       	sbrs	r18, 6
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <vfprintf+0x15a>
    123e:	65 2d       	mov	r22, r5
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x15e>
    1244:	6f ef       	ldi	r22, 0xFF	; 255
    1246:	7f ef       	ldi	r23, 0xFF	; 255
    1248:	c5 01       	movw	r24, r10
    124a:	2c 87       	std	Y+12, r18	; 0x0c
    124c:	0e 94 47 0a 	call	0x148e	; 0x148e <strnlen_P>
    1250:	2c 01       	movw	r4, r24
    1252:	2c 85       	ldd	r18, Y+12	; 0x0c
    1254:	20 68       	ori	r18, 0x80	; 128
    1256:	22 2e       	mov	r2, r18
    1258:	83 01       	movw	r16, r6
    125a:	23 fc       	sbrc	r2, 3
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <vfprintf+0x1aa>
    125e:	83 2d       	mov	r24, r3
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	48 16       	cp	r4, r24
    1264:	59 06       	cpc	r5, r25
    1266:	b0 f4       	brcc	.+44     	; 0x1294 <vfprintf+0x1aa>
    1268:	b7 01       	movw	r22, r14
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    1272:	3a 94       	dec	r3
    1274:	f4 cf       	rjmp	.-24     	; 0x125e <vfprintf+0x174>
    1276:	f5 01       	movw	r30, r10
    1278:	27 fc       	sbrc	r2, 7
    127a:	85 91       	lpm	r24, Z+
    127c:	27 fe       	sbrs	r2, 7
    127e:	81 91       	ld	r24, Z+
    1280:	5f 01       	movw	r10, r30
    1282:	b7 01       	movw	r22, r14
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    128a:	31 10       	cpse	r3, r1
    128c:	3a 94       	dec	r3
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	4f 1a       	sub	r4, r31
    1292:	51 08       	sbc	r5, r1
    1294:	41 14       	cp	r4, r1
    1296:	51 04       	cpc	r5, r1
    1298:	71 f7       	brne	.-36     	; 0x1276 <vfprintf+0x18c>
    129a:	e5 c0       	rjmp	.+458    	; 0x1466 <vfprintf+0x37c>
    129c:	84 36       	cpi	r24, 0x64	; 100
    129e:	11 f0       	breq	.+4      	; 0x12a4 <vfprintf+0x1ba>
    12a0:	89 36       	cpi	r24, 0x69	; 105
    12a2:	39 f5       	brne	.+78     	; 0x12f2 <vfprintf+0x208>
    12a4:	f8 01       	movw	r30, r16
    12a6:	27 ff       	sbrs	r18, 7
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <vfprintf+0x1ce>
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	0c 5f       	subi	r16, 0xFC	; 252
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <vfprintf+0x1de>
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	88 27       	eor	r24, r24
    12be:	77 fd       	sbrc	r23, 7
    12c0:	80 95       	com	r24
    12c2:	98 2f       	mov	r25, r24
    12c4:	0e 5f       	subi	r16, 0xFE	; 254
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	2f 76       	andi	r18, 0x6F	; 111
    12ca:	b2 2e       	mov	r11, r18
    12cc:	97 ff       	sbrs	r25, 7
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <vfprintf+0x1f8>
    12d0:	90 95       	com	r25
    12d2:	80 95       	com	r24
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	20 68       	ori	r18, 0x80	; 128
    12e0:	b2 2e       	mov	r11, r18
    12e2:	2a e0       	ldi	r18, 0x0A	; 10
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	a4 01       	movw	r20, r8
    12e8:	0e 94 8f 0a 	call	0x151e	; 0x151e <__ultoa_invert>
    12ec:	a8 2e       	mov	r10, r24
    12ee:	a8 18       	sub	r10, r8
    12f0:	44 c0       	rjmp	.+136    	; 0x137a <vfprintf+0x290>
    12f2:	85 37       	cpi	r24, 0x75	; 117
    12f4:	29 f4       	brne	.+10     	; 0x1300 <vfprintf+0x216>
    12f6:	2f 7e       	andi	r18, 0xEF	; 239
    12f8:	b2 2e       	mov	r11, r18
    12fa:	2a e0       	ldi	r18, 0x0A	; 10
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	25 c0       	rjmp	.+74     	; 0x134a <vfprintf+0x260>
    1300:	f2 2f       	mov	r31, r18
    1302:	f9 7f       	andi	r31, 0xF9	; 249
    1304:	bf 2e       	mov	r11, r31
    1306:	8f 36       	cpi	r24, 0x6F	; 111
    1308:	c1 f0       	breq	.+48     	; 0x133a <vfprintf+0x250>
    130a:	18 f4       	brcc	.+6      	; 0x1312 <vfprintf+0x228>
    130c:	88 35       	cpi	r24, 0x58	; 88
    130e:	79 f0       	breq	.+30     	; 0x132e <vfprintf+0x244>
    1310:	b4 c0       	rjmp	.+360    	; 0x147a <vfprintf+0x390>
    1312:	80 37       	cpi	r24, 0x70	; 112
    1314:	19 f0       	breq	.+6      	; 0x131c <vfprintf+0x232>
    1316:	88 37       	cpi	r24, 0x78	; 120
    1318:	21 f0       	breq	.+8      	; 0x1322 <vfprintf+0x238>
    131a:	af c0       	rjmp	.+350    	; 0x147a <vfprintf+0x390>
    131c:	2f 2f       	mov	r18, r31
    131e:	20 61       	ori	r18, 0x10	; 16
    1320:	b2 2e       	mov	r11, r18
    1322:	b4 fe       	sbrs	r11, 4
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <vfprintf+0x256>
    1326:	8b 2d       	mov	r24, r11
    1328:	84 60       	ori	r24, 0x04	; 4
    132a:	b8 2e       	mov	r11, r24
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <vfprintf+0x256>
    132e:	24 ff       	sbrs	r18, 4
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <vfprintf+0x25c>
    1332:	9f 2f       	mov	r25, r31
    1334:	96 60       	ori	r25, 0x06	; 6
    1336:	b9 2e       	mov	r11, r25
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <vfprintf+0x25c>
    133a:	28 e0       	ldi	r18, 0x08	; 8
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	05 c0       	rjmp	.+10     	; 0x134a <vfprintf+0x260>
    1340:	20 e1       	ldi	r18, 0x10	; 16
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <vfprintf+0x260>
    1346:	20 e1       	ldi	r18, 0x10	; 16
    1348:	32 e0       	ldi	r19, 0x02	; 2
    134a:	f8 01       	movw	r30, r16
    134c:	b7 fe       	sbrs	r11, 7
    134e:	07 c0       	rjmp	.+14     	; 0x135e <vfprintf+0x274>
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	0c 5f       	subi	r16, 0xFC	; 252
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	06 c0       	rjmp	.+12     	; 0x136a <vfprintf+0x280>
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 5f       	subi	r16, 0xFE	; 254
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	a4 01       	movw	r20, r8
    136c:	0e 94 8f 0a 	call	0x151e	; 0x151e <__ultoa_invert>
    1370:	a8 2e       	mov	r10, r24
    1372:	a8 18       	sub	r10, r8
    1374:	fb 2d       	mov	r31, r11
    1376:	ff 77       	andi	r31, 0x7F	; 127
    1378:	bf 2e       	mov	r11, r31
    137a:	b6 fe       	sbrs	r11, 6
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <vfprintf+0x2aa>
    137e:	2b 2d       	mov	r18, r11
    1380:	2e 7f       	andi	r18, 0xFE	; 254
    1382:	a5 14       	cp	r10, r5
    1384:	50 f4       	brcc	.+20     	; 0x139a <vfprintf+0x2b0>
    1386:	b4 fe       	sbrs	r11, 4
    1388:	0a c0       	rjmp	.+20     	; 0x139e <vfprintf+0x2b4>
    138a:	b2 fc       	sbrc	r11, 2
    138c:	08 c0       	rjmp	.+16     	; 0x139e <vfprintf+0x2b4>
    138e:	2b 2d       	mov	r18, r11
    1390:	2e 7e       	andi	r18, 0xEE	; 238
    1392:	05 c0       	rjmp	.+10     	; 0x139e <vfprintf+0x2b4>
    1394:	7a 2c       	mov	r7, r10
    1396:	2b 2d       	mov	r18, r11
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <vfprintf+0x2b6>
    139a:	7a 2c       	mov	r7, r10
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <vfprintf+0x2b6>
    139e:	75 2c       	mov	r7, r5
    13a0:	24 ff       	sbrs	r18, 4
    13a2:	0d c0       	rjmp	.+26     	; 0x13be <vfprintf+0x2d4>
    13a4:	fe 01       	movw	r30, r28
    13a6:	ea 0d       	add	r30, r10
    13a8:	f1 1d       	adc	r31, r1
    13aa:	80 81       	ld	r24, Z
    13ac:	80 33       	cpi	r24, 0x30	; 48
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <vfprintf+0x2ca>
    13b0:	29 7e       	andi	r18, 0xE9	; 233
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <vfprintf+0x2dc>
    13b4:	22 ff       	sbrs	r18, 2
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <vfprintf+0x2da>
    13b8:	73 94       	inc	r7
    13ba:	73 94       	inc	r7
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <vfprintf+0x2dc>
    13be:	82 2f       	mov	r24, r18
    13c0:	86 78       	andi	r24, 0x86	; 134
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <vfprintf+0x2dc>
    13c4:	73 94       	inc	r7
    13c6:	23 fd       	sbrc	r18, 3
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <vfprintf+0x306>
    13ca:	20 ff       	sbrs	r18, 0
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <vfprintf+0x2f0>
    13ce:	5a 2c       	mov	r5, r10
    13d0:	73 14       	cp	r7, r3
    13d2:	18 f4       	brcc	.+6      	; 0x13da <vfprintf+0x2f0>
    13d4:	53 0c       	add	r5, r3
    13d6:	57 18       	sub	r5, r7
    13d8:	73 2c       	mov	r7, r3
    13da:	73 14       	cp	r7, r3
    13dc:	68 f4       	brcc	.+26     	; 0x13f8 <vfprintf+0x30e>
    13de:	b7 01       	movw	r22, r14
    13e0:	80 e2       	ldi	r24, 0x20	; 32
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	2c 87       	std	Y+12, r18	; 0x0c
    13e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    13ea:	73 94       	inc	r7
    13ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ee:	f5 cf       	rjmp	.-22     	; 0x13da <vfprintf+0x2f0>
    13f0:	73 14       	cp	r7, r3
    13f2:	10 f4       	brcc	.+4      	; 0x13f8 <vfprintf+0x30e>
    13f4:	37 18       	sub	r3, r7
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <vfprintf+0x310>
    13f8:	31 2c       	mov	r3, r1
    13fa:	24 ff       	sbrs	r18, 4
    13fc:	12 c0       	rjmp	.+36     	; 0x1422 <vfprintf+0x338>
    13fe:	b7 01       	movw	r22, r14
    1400:	80 e3       	ldi	r24, 0x30	; 48
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	2c 87       	std	Y+12, r18	; 0x0c
    1406:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    140a:	2c 85       	ldd	r18, Y+12	; 0x0c
    140c:	22 ff       	sbrs	r18, 2
    140e:	17 c0       	rjmp	.+46     	; 0x143e <vfprintf+0x354>
    1410:	21 ff       	sbrs	r18, 1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <vfprintf+0x330>
    1414:	88 e5       	ldi	r24, 0x58	; 88
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x334>
    141a:	88 e7       	ldi	r24, 0x78	; 120
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	b7 01       	movw	r22, r14
    1420:	0c c0       	rjmp	.+24     	; 0x143a <vfprintf+0x350>
    1422:	82 2f       	mov	r24, r18
    1424:	86 78       	andi	r24, 0x86	; 134
    1426:	59 f0       	breq	.+22     	; 0x143e <vfprintf+0x354>
    1428:	21 fd       	sbrc	r18, 1
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x346>
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <vfprintf+0x348>
    1430:	8b e2       	ldi	r24, 0x2B	; 43
    1432:	27 fd       	sbrc	r18, 7
    1434:	8d e2       	ldi	r24, 0x2D	; 45
    1436:	b7 01       	movw	r22, r14
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    143e:	a5 14       	cp	r10, r5
    1440:	38 f4       	brcc	.+14     	; 0x1450 <vfprintf+0x366>
    1442:	b7 01       	movw	r22, r14
    1444:	80 e3       	ldi	r24, 0x30	; 48
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    144c:	5a 94       	dec	r5
    144e:	f7 cf       	rjmp	.-18     	; 0x143e <vfprintf+0x354>
    1450:	aa 94       	dec	r10
    1452:	f4 01       	movw	r30, r8
    1454:	ea 0d       	add	r30, r10
    1456:	f1 1d       	adc	r31, r1
    1458:	80 81       	ld	r24, Z
    145a:	b7 01       	movw	r22, r14
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    1462:	a1 10       	cpse	r10, r1
    1464:	f5 cf       	rjmp	.-22     	; 0x1450 <vfprintf+0x366>
    1466:	33 20       	and	r3, r3
    1468:	09 f4       	brne	.+2      	; 0x146c <vfprintf+0x382>
    146a:	51 ce       	rjmp	.-862    	; 0x110e <vfprintf+0x24>
    146c:	b7 01       	movw	r22, r14
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <fputc>
    1476:	3a 94       	dec	r3
    1478:	f6 cf       	rjmp	.-20     	; 0x1466 <vfprintf+0x37c>
    147a:	f7 01       	movw	r30, r14
    147c:	86 81       	ldd	r24, Z+6	; 0x06
    147e:	97 81       	ldd	r25, Z+7	; 0x07
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0x39c>
    1482:	8f ef       	ldi	r24, 0xFF	; 255
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	2c 96       	adiw	r28, 0x0c	; 12
    1488:	e2 e1       	ldi	r30, 0x12	; 18
    148a:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__epilogue_restores__>

0000148e <strnlen_P>:
    148e:	fc 01       	movw	r30, r24
    1490:	05 90       	lpm	r0, Z+
    1492:	61 50       	subi	r22, 0x01	; 1
    1494:	70 40       	sbci	r23, 0x00	; 0
    1496:	01 10       	cpse	r0, r1
    1498:	d8 f7       	brcc	.-10     	; 0x1490 <strnlen_P+0x2>
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	8e 0f       	add	r24, r30
    14a0:	9f 1f       	adc	r25, r31
    14a2:	08 95       	ret

000014a4 <strnlen>:
    14a4:	fc 01       	movw	r30, r24
    14a6:	61 50       	subi	r22, 0x01	; 1
    14a8:	70 40       	sbci	r23, 0x00	; 0
    14aa:	01 90       	ld	r0, Z+
    14ac:	01 10       	cpse	r0, r1
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <strnlen+0x2>
    14b0:	80 95       	com	r24
    14b2:	90 95       	com	r25
    14b4:	8e 0f       	add	r24, r30
    14b6:	9f 1f       	adc	r25, r31
    14b8:	08 95       	ret

000014ba <fputc>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	18 2f       	mov	r17, r24
    14c4:	09 2f       	mov	r16, r25
    14c6:	eb 01       	movw	r28, r22
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 fd       	sbrc	r24, 1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <fputc+0x1a>
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	9f ef       	ldi	r25, 0xFF	; 255
    14d2:	20 c0       	rjmp	.+64     	; 0x1514 <fputc+0x5a>
    14d4:	82 ff       	sbrs	r24, 2
    14d6:	10 c0       	rjmp	.+32     	; 0x14f8 <fputc+0x3e>
    14d8:	4e 81       	ldd	r20, Y+6	; 0x06
    14da:	5f 81       	ldd	r21, Y+7	; 0x07
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	42 17       	cp	r20, r18
    14e2:	53 07       	cpc	r21, r19
    14e4:	7c f4       	brge	.+30     	; 0x1504 <fputc+0x4a>
    14e6:	e8 81       	ld	r30, Y
    14e8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ea:	9f 01       	movw	r18, r30
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	39 83       	std	Y+1, r19	; 0x01
    14f2:	28 83       	st	Y, r18
    14f4:	10 83       	st	Z, r17
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <fputc+0x4a>
    14f8:	e8 85       	ldd	r30, Y+8	; 0x08
    14fa:	f9 85       	ldd	r31, Y+9	; 0x09
    14fc:	81 2f       	mov	r24, r17
    14fe:	09 95       	icall
    1500:	89 2b       	or	r24, r25
    1502:	29 f7       	brne	.-54     	; 0x14ce <fputc+0x14>
    1504:	2e 81       	ldd	r18, Y+6	; 0x06
    1506:	3f 81       	ldd	r19, Y+7	; 0x07
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	3f 83       	std	Y+7, r19	; 0x07
    150e:	2e 83       	std	Y+6, r18	; 0x06
    1510:	81 2f       	mov	r24, r17
    1512:	90 2f       	mov	r25, r16
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <__ultoa_invert>:
    151e:	fa 01       	movw	r30, r20
    1520:	aa 27       	eor	r26, r26
    1522:	28 30       	cpi	r18, 0x08	; 8
    1524:	51 f1       	breq	.+84     	; 0x157a <__ultoa_invert+0x5c>
    1526:	20 31       	cpi	r18, 0x10	; 16
    1528:	81 f1       	breq	.+96     	; 0x158a <__ultoa_invert+0x6c>
    152a:	e8 94       	clt
    152c:	6f 93       	push	r22
    152e:	6e 7f       	andi	r22, 0xFE	; 254
    1530:	6e 5f       	subi	r22, 0xFE	; 254
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	8f 4f       	sbci	r24, 0xFF	; 255
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	af 4f       	sbci	r26, 0xFF	; 255
    153a:	b1 e0       	ldi	r27, 0x01	; 1
    153c:	3e d0       	rcall	.+124    	; 0x15ba <__ultoa_invert+0x9c>
    153e:	b4 e0       	ldi	r27, 0x04	; 4
    1540:	3c d0       	rcall	.+120    	; 0x15ba <__ultoa_invert+0x9c>
    1542:	67 0f       	add	r22, r23
    1544:	78 1f       	adc	r23, r24
    1546:	89 1f       	adc	r24, r25
    1548:	9a 1f       	adc	r25, r26
    154a:	a1 1d       	adc	r26, r1
    154c:	68 0f       	add	r22, r24
    154e:	79 1f       	adc	r23, r25
    1550:	8a 1f       	adc	r24, r26
    1552:	91 1d       	adc	r25, r1
    1554:	a1 1d       	adc	r26, r1
    1556:	6a 0f       	add	r22, r26
    1558:	71 1d       	adc	r23, r1
    155a:	81 1d       	adc	r24, r1
    155c:	91 1d       	adc	r25, r1
    155e:	a1 1d       	adc	r26, r1
    1560:	20 d0       	rcall	.+64     	; 0x15a2 <__ultoa_invert+0x84>
    1562:	09 f4       	brne	.+2      	; 0x1566 <__ultoa_invert+0x48>
    1564:	68 94       	set
    1566:	3f 91       	pop	r19
    1568:	2a e0       	ldi	r18, 0x0A	; 10
    156a:	26 9f       	mul	r18, r22
    156c:	11 24       	eor	r1, r1
    156e:	30 19       	sub	r19, r0
    1570:	30 5d       	subi	r19, 0xD0	; 208
    1572:	31 93       	st	Z+, r19
    1574:	de f6       	brtc	.-74     	; 0x152c <__ultoa_invert+0xe>
    1576:	cf 01       	movw	r24, r30
    1578:	08 95       	ret
    157a:	46 2f       	mov	r20, r22
    157c:	47 70       	andi	r20, 0x07	; 7
    157e:	40 5d       	subi	r20, 0xD0	; 208
    1580:	41 93       	st	Z+, r20
    1582:	b3 e0       	ldi	r27, 0x03	; 3
    1584:	0f d0       	rcall	.+30     	; 0x15a4 <__ultoa_invert+0x86>
    1586:	c9 f7       	brne	.-14     	; 0x157a <__ultoa_invert+0x5c>
    1588:	f6 cf       	rjmp	.-20     	; 0x1576 <__ultoa_invert+0x58>
    158a:	46 2f       	mov	r20, r22
    158c:	4f 70       	andi	r20, 0x0F	; 15
    158e:	40 5d       	subi	r20, 0xD0	; 208
    1590:	4a 33       	cpi	r20, 0x3A	; 58
    1592:	18 f0       	brcs	.+6      	; 0x159a <__ultoa_invert+0x7c>
    1594:	49 5d       	subi	r20, 0xD9	; 217
    1596:	31 fd       	sbrc	r19, 1
    1598:	40 52       	subi	r20, 0x20	; 32
    159a:	41 93       	st	Z+, r20
    159c:	02 d0       	rcall	.+4      	; 0x15a2 <__ultoa_invert+0x84>
    159e:	a9 f7       	brne	.-22     	; 0x158a <__ultoa_invert+0x6c>
    15a0:	ea cf       	rjmp	.-44     	; 0x1576 <__ultoa_invert+0x58>
    15a2:	b4 e0       	ldi	r27, 0x04	; 4
    15a4:	a6 95       	lsr	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	77 95       	ror	r23
    15ac:	67 95       	ror	r22
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x86>
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 05       	cpc	r22, r1
    15b6:	71 05       	cpc	r23, r1
    15b8:	08 95       	ret
    15ba:	9b 01       	movw	r18, r22
    15bc:	ac 01       	movw	r20, r24
    15be:	0a 2e       	mov	r0, r26
    15c0:	06 94       	lsr	r0
    15c2:	57 95       	ror	r21
    15c4:	47 95       	ror	r20
    15c6:	37 95       	ror	r19
    15c8:	27 95       	ror	r18
    15ca:	ba 95       	dec	r27
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__ultoa_invert+0xa2>
    15ce:	62 0f       	add	r22, r18
    15d0:	73 1f       	adc	r23, r19
    15d2:	84 1f       	adc	r24, r20
    15d4:	95 1f       	adc	r25, r21
    15d6:	a0 1d       	adc	r26, r0
    15d8:	08 95       	ret

000015da <__prologue_saves__>:
    15da:	2f 92       	push	r2
    15dc:	3f 92       	push	r3
    15de:	4f 92       	push	r4
    15e0:	5f 92       	push	r5
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	ca 1b       	sub	r28, r26
    1604:	db 0b       	sbc	r29, r27
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	09 94       	ijmp

00001612 <__epilogue_restores__>:
    1612:	2a 88       	ldd	r2, Y+18	; 0x12
    1614:	39 88       	ldd	r3, Y+17	; 0x11
    1616:	48 88       	ldd	r4, Y+16	; 0x10
    1618:	5f 84       	ldd	r5, Y+15	; 0x0f
    161a:	6e 84       	ldd	r6, Y+14	; 0x0e
    161c:	7d 84       	ldd	r7, Y+13	; 0x0d
    161e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1620:	9b 84       	ldd	r9, Y+11	; 0x0b
    1622:	aa 84       	ldd	r10, Y+10	; 0x0a
    1624:	b9 84       	ldd	r11, Y+9	; 0x09
    1626:	c8 84       	ldd	r12, Y+8	; 0x08
    1628:	df 80       	ldd	r13, Y+7	; 0x07
    162a:	ee 80       	ldd	r14, Y+6	; 0x06
    162c:	fd 80       	ldd	r15, Y+5	; 0x05
    162e:	0c 81       	ldd	r16, Y+4	; 0x04
    1630:	1b 81       	ldd	r17, Y+3	; 0x03
    1632:	aa 81       	ldd	r26, Y+2	; 0x02
    1634:	b9 81       	ldd	r27, Y+1	; 0x01
    1636:	ce 0f       	add	r28, r30
    1638:	d1 1d       	adc	r29, r1
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	ed 01       	movw	r28, r26
    1646:	08 95       	ret

00001648 <_exit>:
    1648:	f8 94       	cli

0000164a <__stop_program>:
    164a:	ff cf       	rjmp	.-2      	; 0x164a <__stop_program>
